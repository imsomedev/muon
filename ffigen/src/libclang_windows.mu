// Generated by ffigen 0.2.0
// Platform: Windows
// Target: 64-bit
:CXError_Success int = 0
:CXError_Failure int = 1
:CXError_Crashed int = 2
:CXError_InvalidArguments int = 3
:CXError_ASTReadError int = 4
CXErrorCode enum #Flags {
	CXError_Success = 0_u
	CXError_Failure = 1_u
	CXError_Crashed = 2_u
	CXError_InvalidArguments = 3_u
	CXError_ASTReadError = 4_u
}
CXString struct {
	data pointer
	private_flags uint
}
CXStringSet struct {
	Strings *CXString
	Count uint
}
clang_getCString(string CXString #As("CXString")) cstring #Foreign("clang_getCString")
clang_disposeString(string CXString #As("CXString")) void #Foreign("clang_disposeString")
clang_disposeStringSet(set *CXStringSet #As("CXStringSet *")) void #Foreign("clang_disposeStringSet")
clang_getBuildSessionTimestamp() ulong #Foreign("clang_getBuildSessionTimestamp")
clang_VirtualFileOverlay_create(options uint) pointer #As("CXVirtualFileOverlay") #Foreign("clang_VirtualFileOverlay_create")
clang_VirtualFileOverlay_addFileMapping(p0 pointer #As("CXVirtualFileOverlay"), virtualPath *sbyte, realPath *sbyte) CXErrorCode #As("enum CXErrorCode") #Foreign("clang_VirtualFileOverlay_addFileMapping")
clang_VirtualFileOverlay_setCaseSensitivity(p0 pointer #As("CXVirtualFileOverlay"), caseSensitive int) CXErrorCode #As("enum CXErrorCode") #Foreign("clang_VirtualFileOverlay_setCaseSensitivity")
clang_VirtualFileOverlay_writeToBuffer(p0 pointer #As("CXVirtualFileOverlay"), options uint, out_buffer_ptr **sbyte, out_buffer_size *uint) CXErrorCode #As("enum CXErrorCode") #Foreign("clang_VirtualFileOverlay_writeToBuffer")
clang_free(buffer pointer) void #Foreign("clang_free")
clang_VirtualFileOverlay_dispose(p0 pointer #As("CXVirtualFileOverlay")) void #Foreign("clang_VirtualFileOverlay_dispose")
clang_ModuleMapDescriptor_create(options uint) pointer #As("CXModuleMapDescriptor") #Foreign("clang_ModuleMapDescriptor_create")
clang_ModuleMapDescriptor_setFrameworkModuleName(p0 pointer #As("CXModuleMapDescriptor"), name *sbyte) CXErrorCode #As("enum CXErrorCode") #Foreign("clang_ModuleMapDescriptor_setFrameworkModuleName")
clang_ModuleMapDescriptor_setUmbrellaHeader(p0 pointer #As("CXModuleMapDescriptor"), name *sbyte) CXErrorCode #As("enum CXErrorCode") #Foreign("clang_ModuleMapDescriptor_setUmbrellaHeader")
clang_ModuleMapDescriptor_writeToBuffer(p0 pointer #As("CXModuleMapDescriptor"), options uint, out_buffer_ptr **sbyte, out_buffer_size *uint) CXErrorCode #As("enum CXErrorCode") #Foreign("clang_ModuleMapDescriptor_writeToBuffer")
clang_ModuleMapDescriptor_dispose(p0 pointer #As("CXModuleMapDescriptor")) void #Foreign("clang_ModuleMapDescriptor_dispose")
CXUnsavedFile struct {
	Filename cstring
	Contents cstring
	Length uint
}
:CXAvailability_Available int = 0
:CXAvailability_Deprecated int = 1
:CXAvailability_NotAvailable int = 2
:CXAvailability_NotAccessible int = 3
CXAvailabilityKind enum #Flags {
	CXAvailability_Available = 0_u
	CXAvailability_Deprecated = 1_u
	CXAvailability_NotAvailable = 2_u
	CXAvailability_NotAccessible = 3_u
}
CXVersion struct {
	Major int
	Minor int
	Subminor int
}
:CXCursor_ExceptionSpecificationKind_None int = 0
:CXCursor_ExceptionSpecificationKind_DynamicNone int = 1
:CXCursor_ExceptionSpecificationKind_Dynamic int = 2
:CXCursor_ExceptionSpecificationKind_MSAny int = 3
:CXCursor_ExceptionSpecificationKind_BasicNoexcept int = 4
:CXCursor_ExceptionSpecificationKind_ComputedNoexcept int = 5
:CXCursor_ExceptionSpecificationKind_Unevaluated int = 6
:CXCursor_ExceptionSpecificationKind_Uninstantiated int = 7
:CXCursor_ExceptionSpecificationKind_Unparsed int = 8
:CXCursor_ExceptionSpecificationKind_NoThrow int = 9
CXCursor_ExceptionSpecificationKind enum #Flags {
	CXCursor_ExceptionSpecificationKind_None = 0_u
	CXCursor_ExceptionSpecificationKind_DynamicNone = 1_u
	CXCursor_ExceptionSpecificationKind_Dynamic = 2_u
	CXCursor_ExceptionSpecificationKind_MSAny = 3_u
	CXCursor_ExceptionSpecificationKind_BasicNoexcept = 4_u
	CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 5_u
	CXCursor_ExceptionSpecificationKind_Unevaluated = 6_u
	CXCursor_ExceptionSpecificationKind_Uninstantiated = 7_u
	CXCursor_ExceptionSpecificationKind_Unparsed = 8_u
	CXCursor_ExceptionSpecificationKind_NoThrow = 9_u
}
clang_createIndex(excludeDeclarationsFromPCH int, displayDiagnostics int) pointer #Foreign("clang_createIndex")
clang_disposeIndex(index pointer) void #Foreign("clang_disposeIndex")
:CXGlobalOpt_None int = 0
:CXGlobalOpt_ThreadBackgroundPriorityForIndexing int = 1
:CXGlobalOpt_ThreadBackgroundPriorityForEditing int = 2
:CXGlobalOpt_ThreadBackgroundPriorityForAll int = 3
CXGlobalOptFlags enum #Flags {
	CXGlobalOpt_None = 0_u
	CXGlobalOpt_ThreadBackgroundPriorityForIndexing = 1_u
	CXGlobalOpt_ThreadBackgroundPriorityForEditing = 2_u
	CXGlobalOpt_ThreadBackgroundPriorityForAll = 3_u
}
clang_CXIndex_setGlobalOptions(p0 pointer, options uint) void #Foreign("clang_CXIndex_setGlobalOptions")
clang_CXIndex_getGlobalOptions(p0 pointer) uint #Foreign("clang_CXIndex_getGlobalOptions")
clang_CXIndex_setInvocationEmissionPathOption(p0 pointer, Path *sbyte) void #Foreign("clang_CXIndex_setInvocationEmissionPathOption")
clang_getFileName(SFile pointer) CXString #As("CXString") #Foreign("clang_getFileName")
clang_getFileTime(SFile pointer) long #Foreign("clang_getFileTime")
CXFileUniqueID struct {
	data_0 ulong
	data_1 ulong
	data_2 ulong
}
clang_getFileUniqueID(file pointer, outID *CXFileUniqueID #As("CXFileUniqueID *")) int #Foreign("clang_getFileUniqueID")
clang_isFileMultipleIncludeGuarded(tu pointer #As("CXTranslationUnit"), file pointer) uint #Foreign("clang_isFileMultipleIncludeGuarded")
clang_getFile(tu pointer #As("CXTranslationUnit"), file_name *sbyte) pointer #Foreign("clang_getFile")
clang_getFileContents(tu pointer #As("CXTranslationUnit"), file pointer, size *ulong) *sbyte #Foreign("clang_getFileContents")
clang_File_isEqual(file1 pointer, file2 pointer) int #Foreign("clang_File_isEqual")
clang_File_tryGetRealPathName(file pointer) CXString #As("CXString") #Foreign("clang_File_tryGetRealPathName")
CXSourceLocation struct {
	ptr_data_0 pointer
	ptr_data_1 pointer
	int_data uint
}
CXSourceRange struct {
	ptr_data_0 pointer
	ptr_data_1 pointer
	begin_int_data uint
	end_int_data uint
}
clang_getNullLocation() CXSourceLocation #As("CXSourceLocation") #Foreign("clang_getNullLocation")
clang_equalLocations(loc1 CXSourceLocation #As("CXSourceLocation"), loc2 CXSourceLocation #As("CXSourceLocation")) uint #Foreign("clang_equalLocations")
clang_getLocation(tu pointer #As("CXTranslationUnit"), file pointer, line uint, column uint) CXSourceLocation #As("CXSourceLocation") #Foreign("clang_getLocation")
clang_getLocationForOffset(tu pointer #As("CXTranslationUnit"), file pointer, offset uint) CXSourceLocation #As("CXSourceLocation") #Foreign("clang_getLocationForOffset")
clang_Location_isInSystemHeader(location CXSourceLocation #As("CXSourceLocation")) int #Foreign("clang_Location_isInSystemHeader")
clang_Location_isFromMainFile(location CXSourceLocation #As("CXSourceLocation")) int #Foreign("clang_Location_isFromMainFile")
clang_getNullRange() CXSourceRange #As("CXSourceRange") #Foreign("clang_getNullRange")
clang_getRange(begin CXSourceLocation #As("CXSourceLocation"), end CXSourceLocation #As("CXSourceLocation")) CXSourceRange #As("CXSourceRange") #Foreign("clang_getRange")
clang_equalRanges(range1 CXSourceRange #As("CXSourceRange"), range2 CXSourceRange #As("CXSourceRange")) uint #Foreign("clang_equalRanges")
clang_Range_isNull(range CXSourceRange #As("CXSourceRange")) int #Foreign("clang_Range_isNull")
clang_getExpansionLocation(location CXSourceLocation #As("CXSourceLocation"), file *pointer, line *uint, column *uint, offset *uint) void #Foreign("clang_getExpansionLocation")
clang_getPresumedLocation(location CXSourceLocation #As("CXSourceLocation"), filename *CXString #As("CXString *"), line *uint, column *uint) void #Foreign("clang_getPresumedLocation")
clang_getInstantiationLocation(location CXSourceLocation #As("CXSourceLocation"), file *pointer, line *uint, column *uint, offset *uint) void #Foreign("clang_getInstantiationLocation")
clang_getSpellingLocation(location CXSourceLocation #As("CXSourceLocation"), file *pointer, line *uint, column *uint, offset *uint) void #Foreign("clang_getSpellingLocation")
clang_getFileLocation(location CXSourceLocation #As("CXSourceLocation"), file *pointer, line *uint, column *uint, offset *uint) void #Foreign("clang_getFileLocation")
clang_getRangeStart(range CXSourceRange #As("CXSourceRange")) CXSourceLocation #As("CXSourceLocation") #Foreign("clang_getRangeStart")
clang_getRangeEnd(range CXSourceRange #As("CXSourceRange")) CXSourceLocation #As("CXSourceLocation") #Foreign("clang_getRangeEnd")
CXSourceRangeList struct {
	count uint
	ranges *CXSourceRange
}
clang_getSkippedRanges(tu pointer #As("CXTranslationUnit"), file pointer) *CXSourceRangeList #As("CXSourceRangeList *") #Foreign("clang_getSkippedRanges")
clang_getAllSkippedRanges(tu pointer #As("CXTranslationUnit")) *CXSourceRangeList #As("CXSourceRangeList *") #Foreign("clang_getAllSkippedRanges")
clang_disposeSourceRangeList(ranges *CXSourceRangeList #As("CXSourceRangeList *")) void #Foreign("clang_disposeSourceRangeList")
:CXDiagnostic_Ignored int = 0
:CXDiagnostic_Note int = 1
:CXDiagnostic_Warning int = 2
:CXDiagnostic_Error int = 3
:CXDiagnostic_Fatal int = 4
CXDiagnosticSeverity enum #Flags {
	CXDiagnostic_Ignored = 0_u
	CXDiagnostic_Note = 1_u
	CXDiagnostic_Warning = 2_u
	CXDiagnostic_Error = 3_u
	CXDiagnostic_Fatal = 4_u
}
clang_getNumDiagnosticsInSet(Diags pointer) uint #Foreign("clang_getNumDiagnosticsInSet")
clang_getDiagnosticInSet(Diags pointer, Index uint) pointer #Foreign("clang_getDiagnosticInSet")
:CXLoadDiag_None int = 0
:CXLoadDiag_Unknown int = 1
:CXLoadDiag_CannotLoad int = 2
:CXLoadDiag_InvalidFile int = 3
CXLoadDiag_Error enum #Flags {
	CXLoadDiag_None = 0_u
	CXLoadDiag_Unknown = 1_u
	CXLoadDiag_CannotLoad = 2_u
	CXLoadDiag_InvalidFile = 3_u
}
clang_loadDiagnostics(file *sbyte, error *CXLoadDiag_Error #As("enum CXLoadDiag_Error *"), errorString *CXString #As("CXString *")) pointer #Foreign("clang_loadDiagnostics")
clang_disposeDiagnosticSet(Diags pointer) void #Foreign("clang_disposeDiagnosticSet")
clang_getChildDiagnostics(D pointer) pointer #Foreign("clang_getChildDiagnostics")
clang_getNumDiagnostics(Unit pointer #As("CXTranslationUnit")) uint #Foreign("clang_getNumDiagnostics")
clang_getDiagnostic(Unit pointer #As("CXTranslationUnit"), Index uint) pointer #Foreign("clang_getDiagnostic")
clang_getDiagnosticSetFromTU(Unit pointer #As("CXTranslationUnit")) pointer #Foreign("clang_getDiagnosticSetFromTU")
clang_disposeDiagnostic(Diagnostic pointer) void #Foreign("clang_disposeDiagnostic")
:CXDiagnostic_DisplaySourceLocation int = 1
:CXDiagnostic_DisplayColumn int = 2
:CXDiagnostic_DisplaySourceRanges int = 4
:CXDiagnostic_DisplayOption int = 8
:CXDiagnostic_DisplayCategoryId int = 16
:CXDiagnostic_DisplayCategoryName int = 32
CXDiagnosticDisplayOptions enum #Flags {
	CXDiagnostic_DisplaySourceLocation = 1_u
	CXDiagnostic_DisplayColumn = 2_u
	CXDiagnostic_DisplaySourceRanges = 4_u
	CXDiagnostic_DisplayOption = 8_u
	CXDiagnostic_DisplayCategoryId = 16_u
	CXDiagnostic_DisplayCategoryName = 32_u
}
clang_formatDiagnostic(Diagnostic pointer, Options uint) CXString #As("CXString") #Foreign("clang_formatDiagnostic")
clang_defaultDiagnosticDisplayOptions() uint #Foreign("clang_defaultDiagnosticDisplayOptions")
clang_getDiagnosticSeverity(p0 pointer) CXDiagnosticSeverity #As("enum CXDiagnosticSeverity") #Foreign("clang_getDiagnosticSeverity")
clang_getDiagnosticLocation(p0 pointer) CXSourceLocation #As("CXSourceLocation") #Foreign("clang_getDiagnosticLocation")
clang_getDiagnosticSpelling(p0 pointer) CXString #As("CXString") #Foreign("clang_getDiagnosticSpelling")
clang_getDiagnosticOption(Diag pointer, Disable *CXString #As("CXString *")) CXString #As("CXString") #Foreign("clang_getDiagnosticOption")
clang_getDiagnosticCategory(p0 pointer) uint #Foreign("clang_getDiagnosticCategory")
clang_getDiagnosticCategoryName(Category uint) CXString #As("CXString") #Foreign("clang_getDiagnosticCategoryName")
clang_getDiagnosticCategoryText(p0 pointer) CXString #As("CXString") #Foreign("clang_getDiagnosticCategoryText")
clang_getDiagnosticNumRanges(p0 pointer) uint #Foreign("clang_getDiagnosticNumRanges")
clang_getDiagnosticRange(Diagnostic pointer, Range uint) CXSourceRange #As("CXSourceRange") #Foreign("clang_getDiagnosticRange")
clang_getDiagnosticNumFixIts(Diagnostic pointer) uint #Foreign("clang_getDiagnosticNumFixIts")
clang_getDiagnosticFixIt(Diagnostic pointer, FixIt uint, ReplacementRange *CXSourceRange #As("CXSourceRange *")) CXString #As("CXString") #Foreign("clang_getDiagnosticFixIt")
clang_getTranslationUnitSpelling(CTUnit pointer #As("CXTranslationUnit")) CXString #As("CXString") #Foreign("clang_getTranslationUnitSpelling")
clang_createTranslationUnitFromSourceFile(CIdx pointer, source_filename *sbyte, num_clang_command_line_args int, clang_command_line_args **sbyte, num_unsaved_files uint, unsaved_files *CXUnsavedFile #As("struct CXUnsavedFile *")) pointer #As("CXTranslationUnit") #Foreign("clang_createTranslationUnitFromSourceFile")
clang_createTranslationUnit(CIdx pointer, ast_filename *sbyte) pointer #As("CXTranslationUnit") #Foreign("clang_createTranslationUnit")
clang_createTranslationUnit2(CIdx pointer, ast_filename *sbyte, out_TU *pointer #As("CXTranslationUnit *")) CXErrorCode #As("enum CXErrorCode") #Foreign("clang_createTranslationUnit2")
:CXTranslationUnit_None int = 0
:CXTranslationUnit_DetailedPreprocessingRecord int = 1
:CXTranslationUnit_Incomplete int = 2
:CXTranslationUnit_PrecompiledPreamble int = 4
:CXTranslationUnit_CacheCompletionResults int = 8
:CXTranslationUnit_ForSerialization int = 16
:CXTranslationUnit_CXXChainedPCH int = 32
:CXTranslationUnit_SkipFunctionBodies int = 64
:CXTranslationUnit_IncludeBriefCommentsInCodeCompletion int = 128
:CXTranslationUnit_CreatePreambleOnFirstParse int = 256
:CXTranslationUnit_KeepGoing int = 512
:CXTranslationUnit_SingleFileParse int = 1024
:CXTranslationUnit_LimitSkipFunctionBodiesToPreamble int = 2048
:CXTranslationUnit_IncludeAttributedTypes int = 4096
:CXTranslationUnit_VisitImplicitAttributes int = 8192
:CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles int = 16384
CXTranslationUnit_Flags enum #Flags {
	CXTranslationUnit_None = 0_u
	CXTranslationUnit_DetailedPreprocessingRecord = 1_u
	CXTranslationUnit_Incomplete = 2_u
	CXTranslationUnit_PrecompiledPreamble = 4_u
	CXTranslationUnit_CacheCompletionResults = 8_u
	CXTranslationUnit_ForSerialization = 16_u
	CXTranslationUnit_CXXChainedPCH = 32_u
	CXTranslationUnit_SkipFunctionBodies = 64_u
	CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 128_u
	CXTranslationUnit_CreatePreambleOnFirstParse = 256_u
	CXTranslationUnit_KeepGoing = 512_u
	CXTranslationUnit_SingleFileParse = 1024_u
	CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = 2048_u
	CXTranslationUnit_IncludeAttributedTypes = 4096_u
	CXTranslationUnit_VisitImplicitAttributes = 8192_u
	CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = 16384_u
}
clang_defaultEditingTranslationUnitOptions() uint #Foreign("clang_defaultEditingTranslationUnitOptions")
clang_parseTranslationUnit(CIdx pointer, source_filename cstring, command_line_args *cstring, num_command_line_args int, unsaved_files *CXUnsavedFile #As("struct CXUnsavedFile *"), num_unsaved_files uint, options uint) pointer #As("CXTranslationUnit") #Foreign("clang_parseTranslationUnit")
clang_parseTranslationUnit2(CIdx pointer, source_filename *sbyte, command_line_args **sbyte, num_command_line_args int, unsaved_files *CXUnsavedFile #As("struct CXUnsavedFile *"), num_unsaved_files uint, options uint, out_TU *pointer #As("CXTranslationUnit *")) CXErrorCode #As("enum CXErrorCode") #Foreign("clang_parseTranslationUnit2")
clang_parseTranslationUnit2FullArgv(CIdx pointer, source_filename *sbyte, command_line_args **sbyte, num_command_line_args int, unsaved_files *CXUnsavedFile #As("struct CXUnsavedFile *"), num_unsaved_files uint, options uint, out_TU *pointer #As("CXTranslationUnit *")) CXErrorCode #As("enum CXErrorCode") #Foreign("clang_parseTranslationUnit2FullArgv")
:CXSaveTranslationUnit_None int = 0
CXSaveTranslationUnit_Flags enum #Flags {
	CXSaveTranslationUnit_None = 0_u
}
clang_defaultSaveOptions(TU pointer #As("CXTranslationUnit")) uint #Foreign("clang_defaultSaveOptions")
:CXSaveError_None int = 0
:CXSaveError_Unknown int = 1
:CXSaveError_TranslationErrors int = 2
:CXSaveError_InvalidTU int = 3
CXSaveError enum #Flags {
	CXSaveError_None = 0_u
	CXSaveError_Unknown = 1_u
	CXSaveError_TranslationErrors = 2_u
	CXSaveError_InvalidTU = 3_u
}
clang_saveTranslationUnit(TU pointer #As("CXTranslationUnit"), FileName *sbyte, options uint) int #Foreign("clang_saveTranslationUnit")
clang_suspendTranslationUnit(p0 pointer #As("CXTranslationUnit")) uint #Foreign("clang_suspendTranslationUnit")
clang_disposeTranslationUnit(p0 pointer #As("CXTranslationUnit")) void #Foreign("clang_disposeTranslationUnit")
:CXReparse_None int = 0
CXReparse_Flags enum #Flags {
	CXReparse_None = 0_u
}
clang_defaultReparseOptions(TU pointer #As("CXTranslationUnit")) uint #Foreign("clang_defaultReparseOptions")
clang_reparseTranslationUnit(TU pointer #As("CXTranslationUnit"), num_unsaved_files uint, unsaved_files *CXUnsavedFile #As("struct CXUnsavedFile *"), options uint) int #Foreign("clang_reparseTranslationUnit")
:CXTUResourceUsage_AST int = 1
:CXTUResourceUsage_Identifiers int = 2
:CXTUResourceUsage_Selectors int = 3
:CXTUResourceUsage_GlobalCompletionResults int = 4
:CXTUResourceUsage_SourceManagerContentCache int = 5
:CXTUResourceUsage_AST_SideTables int = 6
:CXTUResourceUsage_SourceManager_Membuffer_Malloc int = 7
:CXTUResourceUsage_SourceManager_Membuffer_MMap int = 8
:CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc int = 9
:CXTUResourceUsage_ExternalASTSource_Membuffer_MMap int = 10
:CXTUResourceUsage_Preprocessor int = 11
:CXTUResourceUsage_PreprocessingRecord int = 12
:CXTUResourceUsage_SourceManager_DataStructures int = 13
:CXTUResourceUsage_Preprocessor_HeaderSearch int = 14
:CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN int = 1
:CXTUResourceUsage_MEMORY_IN_BYTES_END int = 14
:CXTUResourceUsage_First int = 1
:CXTUResourceUsage_Last int = 14
CXTUResourceUsageKind enum #Flags {
	CXTUResourceUsage_AST = 1_u
	CXTUResourceUsage_Identifiers = 2_u
	CXTUResourceUsage_Selectors = 3_u
	CXTUResourceUsage_GlobalCompletionResults = 4_u
	CXTUResourceUsage_SourceManagerContentCache = 5_u
	CXTUResourceUsage_AST_SideTables = 6_u
	CXTUResourceUsage_SourceManager_Membuffer_Malloc = 7_u
	CXTUResourceUsage_SourceManager_Membuffer_MMap = 8_u
	CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = 9_u
	CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = 10_u
	CXTUResourceUsage_Preprocessor = 11_u
	CXTUResourceUsage_PreprocessingRecord = 12_u
	CXTUResourceUsage_SourceManager_DataStructures = 13_u
	CXTUResourceUsage_Preprocessor_HeaderSearch = 14_u
	CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = 1_u
	CXTUResourceUsage_MEMORY_IN_BYTES_END = 14_u
	CXTUResourceUsage_First = 1_u
	CXTUResourceUsage_Last = 14_u
}
clang_getTUResourceUsageName(kind CXTUResourceUsageKind #As("enum CXTUResourceUsageKind")) *sbyte #Foreign("clang_getTUResourceUsageName")
CXTUResourceUsageEntry struct {
	kind CXTUResourceUsageKind
	amount uint
}
CXTUResourceUsage struct {
	data pointer
	numEntries uint
	entries *CXTUResourceUsageEntry
}
clang_getCXTUResourceUsage(TU pointer #As("CXTranslationUnit")) CXTUResourceUsage #As("CXTUResourceUsage") #Foreign("clang_getCXTUResourceUsage")
clang_disposeCXTUResourceUsage(usage CXTUResourceUsage #As("CXTUResourceUsage")) void #Foreign("clang_disposeCXTUResourceUsage")
clang_getTranslationUnitTargetInfo(CTUnit pointer #As("CXTranslationUnit")) pointer #As("CXTargetInfo") #Foreign("clang_getTranslationUnitTargetInfo")
clang_TargetInfo_dispose(Info pointer #As("CXTargetInfo")) void #Foreign("clang_TargetInfo_dispose")
clang_TargetInfo_getTriple(Info pointer #As("CXTargetInfo")) CXString #As("CXString") #Foreign("clang_TargetInfo_getTriple")
clang_TargetInfo_getPointerWidth(Info pointer #As("CXTargetInfo")) int #Foreign("clang_TargetInfo_getPointerWidth")
:CXCursor_UnexposedDecl int = 1
:CXCursor_StructDecl int = 2
:CXCursor_UnionDecl int = 3
:CXCursor_ClassDecl int = 4
:CXCursor_EnumDecl int = 5
:CXCursor_FieldDecl int = 6
:CXCursor_EnumConstantDecl int = 7
:CXCursor_FunctionDecl int = 8
:CXCursor_VarDecl int = 9
:CXCursor_ParmDecl int = 10
:CXCursor_ObjCInterfaceDecl int = 11
:CXCursor_ObjCCategoryDecl int = 12
:CXCursor_ObjCProtocolDecl int = 13
:CXCursor_ObjCPropertyDecl int = 14
:CXCursor_ObjCIvarDecl int = 15
:CXCursor_ObjCInstanceMethodDecl int = 16
:CXCursor_ObjCClassMethodDecl int = 17
:CXCursor_ObjCImplementationDecl int = 18
:CXCursor_ObjCCategoryImplDecl int = 19
:CXCursor_TypedefDecl int = 20
:CXCursor_CXXMethod int = 21
:CXCursor_Namespace int = 22
:CXCursor_LinkageSpec int = 23
:CXCursor_Constructor int = 24
:CXCursor_Destructor int = 25
:CXCursor_ConversionFunction int = 26
:CXCursor_TemplateTypeParameter int = 27
:CXCursor_NonTypeTemplateParameter int = 28
:CXCursor_TemplateTemplateParameter int = 29
:CXCursor_FunctionTemplate int = 30
:CXCursor_ClassTemplate int = 31
:CXCursor_ClassTemplatePartialSpecialization int = 32
:CXCursor_NamespaceAlias int = 33
:CXCursor_UsingDirective int = 34
:CXCursor_UsingDeclaration int = 35
:CXCursor_TypeAliasDecl int = 36
:CXCursor_ObjCSynthesizeDecl int = 37
:CXCursor_ObjCDynamicDecl int = 38
:CXCursor_CXXAccessSpecifier int = 39
:CXCursor_FirstDecl int = 1
:CXCursor_LastDecl int = 39
:CXCursor_FirstRef int = 40
:CXCursor_ObjCSuperClassRef int = 40
:CXCursor_ObjCProtocolRef int = 41
:CXCursor_ObjCClassRef int = 42
:CXCursor_TypeRef int = 43
:CXCursor_CXXBaseSpecifier int = 44
:CXCursor_TemplateRef int = 45
:CXCursor_NamespaceRef int = 46
:CXCursor_MemberRef int = 47
:CXCursor_LabelRef int = 48
:CXCursor_OverloadedDeclRef int = 49
:CXCursor_VariableRef int = 50
:CXCursor_LastRef int = 50
:CXCursor_FirstInvalid int = 70
:CXCursor_InvalidFile int = 70
:CXCursor_NoDeclFound int = 71
:CXCursor_NotImplemented int = 72
:CXCursor_InvalidCode int = 73
:CXCursor_LastInvalid int = 73
:CXCursor_FirstExpr int = 100
:CXCursor_UnexposedExpr int = 100
:CXCursor_DeclRefExpr int = 101
:CXCursor_MemberRefExpr int = 102
:CXCursor_CallExpr int = 103
:CXCursor_ObjCMessageExpr int = 104
:CXCursor_BlockExpr int = 105
:CXCursor_IntegerLiteral int = 106
:CXCursor_FloatingLiteral int = 107
:CXCursor_ImaginaryLiteral int = 108
:CXCursor_StringLiteral int = 109
:CXCursor_CharacterLiteral int = 110
:CXCursor_ParenExpr int = 111
:CXCursor_UnaryOperator int = 112
:CXCursor_ArraySubscriptExpr int = 113
:CXCursor_BinaryOperator int = 114
:CXCursor_CompoundAssignOperator int = 115
:CXCursor_ConditionalOperator int = 116
:CXCursor_CStyleCastExpr int = 117
:CXCursor_CompoundLiteralExpr int = 118
:CXCursor_InitListExpr int = 119
:CXCursor_AddrLabelExpr int = 120
:CXCursor_StmtExpr int = 121
:CXCursor_GenericSelectionExpr int = 122
:CXCursor_GNUNullExpr int = 123
:CXCursor_CXXStaticCastExpr int = 124
:CXCursor_CXXDynamicCastExpr int = 125
:CXCursor_CXXReinterpretCastExpr int = 126
:CXCursor_CXXConstCastExpr int = 127
:CXCursor_CXXFunctionalCastExpr int = 128
:CXCursor_CXXTypeidExpr int = 129
:CXCursor_CXXBoolLiteralExpr int = 130
:CXCursor_CXXNullPtrLiteralExpr int = 131
:CXCursor_CXXThisExpr int = 132
:CXCursor_CXXThrowExpr int = 133
:CXCursor_CXXNewExpr int = 134
:CXCursor_CXXDeleteExpr int = 135
:CXCursor_UnaryExpr int = 136
:CXCursor_ObjCStringLiteral int = 137
:CXCursor_ObjCEncodeExpr int = 138
:CXCursor_ObjCSelectorExpr int = 139
:CXCursor_ObjCProtocolExpr int = 140
:CXCursor_ObjCBridgedCastExpr int = 141
:CXCursor_PackExpansionExpr int = 142
:CXCursor_SizeOfPackExpr int = 143
:CXCursor_LambdaExpr int = 144
:CXCursor_ObjCBoolLiteralExpr int = 145
:CXCursor_ObjCSelfExpr int = 146
:CXCursor_OMPArraySectionExpr int = 147
:CXCursor_ObjCAvailabilityCheckExpr int = 148
:CXCursor_FixedPointLiteral int = 149
:CXCursor_LastExpr int = 149
:CXCursor_FirstStmt int = 200
:CXCursor_UnexposedStmt int = 200
:CXCursor_LabelStmt int = 201
:CXCursor_CompoundStmt int = 202
:CXCursor_CaseStmt int = 203
:CXCursor_DefaultStmt int = 204
:CXCursor_IfStmt int = 205
:CXCursor_SwitchStmt int = 206
:CXCursor_WhileStmt int = 207
:CXCursor_DoStmt int = 208
:CXCursor_ForStmt int = 209
:CXCursor_GotoStmt int = 210
:CXCursor_IndirectGotoStmt int = 211
:CXCursor_ContinueStmt int = 212
:CXCursor_BreakStmt int = 213
:CXCursor_ReturnStmt int = 214
:CXCursor_GCCAsmStmt int = 215
:CXCursor_AsmStmt int = 215
:CXCursor_ObjCAtTryStmt int = 216
:CXCursor_ObjCAtCatchStmt int = 217
:CXCursor_ObjCAtFinallyStmt int = 218
:CXCursor_ObjCAtThrowStmt int = 219
:CXCursor_ObjCAtSynchronizedStmt int = 220
:CXCursor_ObjCAutoreleasePoolStmt int = 221
:CXCursor_ObjCForCollectionStmt int = 222
:CXCursor_CXXCatchStmt int = 223
:CXCursor_CXXTryStmt int = 224
:CXCursor_CXXForRangeStmt int = 225
:CXCursor_SEHTryStmt int = 226
:CXCursor_SEHExceptStmt int = 227
:CXCursor_SEHFinallyStmt int = 228
:CXCursor_MSAsmStmt int = 229
:CXCursor_NullStmt int = 230
:CXCursor_DeclStmt int = 231
:CXCursor_OMPParallelDirective int = 232
:CXCursor_OMPSimdDirective int = 233
:CXCursor_OMPForDirective int = 234
:CXCursor_OMPSectionsDirective int = 235
:CXCursor_OMPSectionDirective int = 236
:CXCursor_OMPSingleDirective int = 237
:CXCursor_OMPParallelForDirective int = 238
:CXCursor_OMPParallelSectionsDirective int = 239
:CXCursor_OMPTaskDirective int = 240
:CXCursor_OMPMasterDirective int = 241
:CXCursor_OMPCriticalDirective int = 242
:CXCursor_OMPTaskyieldDirective int = 243
:CXCursor_OMPBarrierDirective int = 244
:CXCursor_OMPTaskwaitDirective int = 245
:CXCursor_OMPFlushDirective int = 246
:CXCursor_SEHLeaveStmt int = 247
:CXCursor_OMPOrderedDirective int = 248
:CXCursor_OMPAtomicDirective int = 249
:CXCursor_OMPForSimdDirective int = 250
:CXCursor_OMPParallelForSimdDirective int = 251
:CXCursor_OMPTargetDirective int = 252
:CXCursor_OMPTeamsDirective int = 253
:CXCursor_OMPTaskgroupDirective int = 254
:CXCursor_OMPCancellationPointDirective int = 255
:CXCursor_OMPCancelDirective int = 256
:CXCursor_OMPTargetDataDirective int = 257
:CXCursor_OMPTaskLoopDirective int = 258
:CXCursor_OMPTaskLoopSimdDirective int = 259
:CXCursor_OMPDistributeDirective int = 260
:CXCursor_OMPTargetEnterDataDirective int = 261
:CXCursor_OMPTargetExitDataDirective int = 262
:CXCursor_OMPTargetParallelDirective int = 263
:CXCursor_OMPTargetParallelForDirective int = 264
:CXCursor_OMPTargetUpdateDirective int = 265
:CXCursor_OMPDistributeParallelForDirective int = 266
:CXCursor_OMPDistributeParallelForSimdDirective int = 267
:CXCursor_OMPDistributeSimdDirective int = 268
:CXCursor_OMPTargetParallelForSimdDirective int = 269
:CXCursor_OMPTargetSimdDirective int = 270
:CXCursor_OMPTeamsDistributeDirective int = 271
:CXCursor_OMPTeamsDistributeSimdDirective int = 272
:CXCursor_OMPTeamsDistributeParallelForSimdDirective int = 273
:CXCursor_OMPTeamsDistributeParallelForDirective int = 274
:CXCursor_OMPTargetTeamsDirective int = 275
:CXCursor_OMPTargetTeamsDistributeDirective int = 276
:CXCursor_OMPTargetTeamsDistributeParallelForDirective int = 277
:CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective int = 278
:CXCursor_OMPTargetTeamsDistributeSimdDirective int = 279
:CXCursor_BuiltinBitCastExpr int = 280
:CXCursor_LastStmt int = 280
:CXCursor_TranslationUnit int = 300
:CXCursor_FirstAttr int = 400
:CXCursor_UnexposedAttr int = 400
:CXCursor_IBActionAttr int = 401
:CXCursor_IBOutletAttr int = 402
:CXCursor_IBOutletCollectionAttr int = 403
:CXCursor_CXXFinalAttr int = 404
:CXCursor_CXXOverrideAttr int = 405
:CXCursor_AnnotateAttr int = 406
:CXCursor_AsmLabelAttr int = 407
:CXCursor_PackedAttr int = 408
:CXCursor_PureAttr int = 409
:CXCursor_ConstAttr int = 410
:CXCursor_NoDuplicateAttr int = 411
:CXCursor_CUDAConstantAttr int = 412
:CXCursor_CUDADeviceAttr int = 413
:CXCursor_CUDAGlobalAttr int = 414
:CXCursor_CUDAHostAttr int = 415
:CXCursor_CUDASharedAttr int = 416
:CXCursor_VisibilityAttr int = 417
:CXCursor_DLLExport int = 418
:CXCursor_DLLImport int = 419
:CXCursor_NSReturnsRetained int = 420
:CXCursor_NSReturnsNotRetained int = 421
:CXCursor_NSReturnsAutoreleased int = 422
:CXCursor_NSConsumesSelf int = 423
:CXCursor_NSConsumed int = 424
:CXCursor_ObjCException int = 425
:CXCursor_ObjCNSObject int = 426
:CXCursor_ObjCIndependentClass int = 427
:CXCursor_ObjCPreciseLifetime int = 428
:CXCursor_ObjCReturnsInnerPointer int = 429
:CXCursor_ObjCRequiresSuper int = 430
:CXCursor_ObjCRootClass int = 431
:CXCursor_ObjCSubclassingRestricted int = 432
:CXCursor_ObjCExplicitProtocolImpl int = 433
:CXCursor_ObjCDesignatedInitializer int = 434
:CXCursor_ObjCRuntimeVisible int = 435
:CXCursor_ObjCBoxable int = 436
:CXCursor_FlagEnum int = 437
:CXCursor_ConvergentAttr int = 438
:CXCursor_WarnUnusedAttr int = 439
:CXCursor_WarnUnusedResultAttr int = 440
:CXCursor_AlignedAttr int = 441
:CXCursor_LastAttr int = 441
:CXCursor_PreprocessingDirective int = 500
:CXCursor_MacroDefinition int = 501
:CXCursor_MacroExpansion int = 502
:CXCursor_MacroInstantiation int = 502
:CXCursor_InclusionDirective int = 503
:CXCursor_FirstPreprocessing int = 500
:CXCursor_LastPreprocessing int = 503
:CXCursor_ModuleImportDecl int = 600
:CXCursor_TypeAliasTemplateDecl int = 601
:CXCursor_StaticAssert int = 602
:CXCursor_FriendDecl int = 603
:CXCursor_FirstExtraDecl int = 600
:CXCursor_LastExtraDecl int = 603
:CXCursor_OverloadCandidate int = 700
CXCursorKind enum #Flags {
	CXCursor_UnexposedDecl = 1_u
	CXCursor_StructDecl = 2_u
	CXCursor_UnionDecl = 3_u
	CXCursor_ClassDecl = 4_u
	CXCursor_EnumDecl = 5_u
	CXCursor_FieldDecl = 6_u
	CXCursor_EnumConstantDecl = 7_u
	CXCursor_FunctionDecl = 8_u
	CXCursor_VarDecl = 9_u
	CXCursor_ParmDecl = 10_u
	CXCursor_ObjCInterfaceDecl = 11_u
	CXCursor_ObjCCategoryDecl = 12_u
	CXCursor_ObjCProtocolDecl = 13_u
	CXCursor_ObjCPropertyDecl = 14_u
	CXCursor_ObjCIvarDecl = 15_u
	CXCursor_ObjCInstanceMethodDecl = 16_u
	CXCursor_ObjCClassMethodDecl = 17_u
	CXCursor_ObjCImplementationDecl = 18_u
	CXCursor_ObjCCategoryImplDecl = 19_u
	CXCursor_TypedefDecl = 20_u
	CXCursor_CXXMethod = 21_u
	CXCursor_Namespace = 22_u
	CXCursor_LinkageSpec = 23_u
	CXCursor_Constructor = 24_u
	CXCursor_Destructor = 25_u
	CXCursor_ConversionFunction = 26_u
	CXCursor_TemplateTypeParameter = 27_u
	CXCursor_NonTypeTemplateParameter = 28_u
	CXCursor_TemplateTemplateParameter = 29_u
	CXCursor_FunctionTemplate = 30_u
	CXCursor_ClassTemplate = 31_u
	CXCursor_ClassTemplatePartialSpecialization = 32_u
	CXCursor_NamespaceAlias = 33_u
	CXCursor_UsingDirective = 34_u
	CXCursor_UsingDeclaration = 35_u
	CXCursor_TypeAliasDecl = 36_u
	CXCursor_ObjCSynthesizeDecl = 37_u
	CXCursor_ObjCDynamicDecl = 38_u
	CXCursor_CXXAccessSpecifier = 39_u
	CXCursor_FirstDecl = 1_u
	CXCursor_LastDecl = 39_u
	CXCursor_FirstRef = 40_u
	CXCursor_ObjCSuperClassRef = 40_u
	CXCursor_ObjCProtocolRef = 41_u
	CXCursor_ObjCClassRef = 42_u
	CXCursor_TypeRef = 43_u
	CXCursor_CXXBaseSpecifier = 44_u
	CXCursor_TemplateRef = 45_u
	CXCursor_NamespaceRef = 46_u
	CXCursor_MemberRef = 47_u
	CXCursor_LabelRef = 48_u
	CXCursor_OverloadedDeclRef = 49_u
	CXCursor_VariableRef = 50_u
	CXCursor_LastRef = 50_u
	CXCursor_FirstInvalid = 70_u
	CXCursor_InvalidFile = 70_u
	CXCursor_NoDeclFound = 71_u
	CXCursor_NotImplemented = 72_u
	CXCursor_InvalidCode = 73_u
	CXCursor_LastInvalid = 73_u
	CXCursor_FirstExpr = 100_u
	CXCursor_UnexposedExpr = 100_u
	CXCursor_DeclRefExpr = 101_u
	CXCursor_MemberRefExpr = 102_u
	CXCursor_CallExpr = 103_u
	CXCursor_ObjCMessageExpr = 104_u
	CXCursor_BlockExpr = 105_u
	CXCursor_IntegerLiteral = 106_u
	CXCursor_FloatingLiteral = 107_u
	CXCursor_ImaginaryLiteral = 108_u
	CXCursor_StringLiteral = 109_u
	CXCursor_CharacterLiteral = 110_u
	CXCursor_ParenExpr = 111_u
	CXCursor_UnaryOperator = 112_u
	CXCursor_ArraySubscriptExpr = 113_u
	CXCursor_BinaryOperator = 114_u
	CXCursor_CompoundAssignOperator = 115_u
	CXCursor_ConditionalOperator = 116_u
	CXCursor_CStyleCastExpr = 117_u
	CXCursor_CompoundLiteralExpr = 118_u
	CXCursor_InitListExpr = 119_u
	CXCursor_AddrLabelExpr = 120_u
	CXCursor_StmtExpr = 121_u
	CXCursor_GenericSelectionExpr = 122_u
	CXCursor_GNUNullExpr = 123_u
	CXCursor_CXXStaticCastExpr = 124_u
	CXCursor_CXXDynamicCastExpr = 125_u
	CXCursor_CXXReinterpretCastExpr = 126_u
	CXCursor_CXXConstCastExpr = 127_u
	CXCursor_CXXFunctionalCastExpr = 128_u
	CXCursor_CXXTypeidExpr = 129_u
	CXCursor_CXXBoolLiteralExpr = 130_u
	CXCursor_CXXNullPtrLiteralExpr = 131_u
	CXCursor_CXXThisExpr = 132_u
	CXCursor_CXXThrowExpr = 133_u
	CXCursor_CXXNewExpr = 134_u
	CXCursor_CXXDeleteExpr = 135_u
	CXCursor_UnaryExpr = 136_u
	CXCursor_ObjCStringLiteral = 137_u
	CXCursor_ObjCEncodeExpr = 138_u
	CXCursor_ObjCSelectorExpr = 139_u
	CXCursor_ObjCProtocolExpr = 140_u
	CXCursor_ObjCBridgedCastExpr = 141_u
	CXCursor_PackExpansionExpr = 142_u
	CXCursor_SizeOfPackExpr = 143_u
	CXCursor_LambdaExpr = 144_u
	CXCursor_ObjCBoolLiteralExpr = 145_u
	CXCursor_ObjCSelfExpr = 146_u
	CXCursor_OMPArraySectionExpr = 147_u
	CXCursor_ObjCAvailabilityCheckExpr = 148_u
	CXCursor_FixedPointLiteral = 149_u
	CXCursor_LastExpr = 149_u
	CXCursor_FirstStmt = 200_u
	CXCursor_UnexposedStmt = 200_u
	CXCursor_LabelStmt = 201_u
	CXCursor_CompoundStmt = 202_u
	CXCursor_CaseStmt = 203_u
	CXCursor_DefaultStmt = 204_u
	CXCursor_IfStmt = 205_u
	CXCursor_SwitchStmt = 206_u
	CXCursor_WhileStmt = 207_u
	CXCursor_DoStmt = 208_u
	CXCursor_ForStmt = 209_u
	CXCursor_GotoStmt = 210_u
	CXCursor_IndirectGotoStmt = 211_u
	CXCursor_ContinueStmt = 212_u
	CXCursor_BreakStmt = 213_u
	CXCursor_ReturnStmt = 214_u
	CXCursor_GCCAsmStmt = 215_u
	CXCursor_AsmStmt = 215_u
	CXCursor_ObjCAtTryStmt = 216_u
	CXCursor_ObjCAtCatchStmt = 217_u
	CXCursor_ObjCAtFinallyStmt = 218_u
	CXCursor_ObjCAtThrowStmt = 219_u
	CXCursor_ObjCAtSynchronizedStmt = 220_u
	CXCursor_ObjCAutoreleasePoolStmt = 221_u
	CXCursor_ObjCForCollectionStmt = 222_u
	CXCursor_CXXCatchStmt = 223_u
	CXCursor_CXXTryStmt = 224_u
	CXCursor_CXXForRangeStmt = 225_u
	CXCursor_SEHTryStmt = 226_u
	CXCursor_SEHExceptStmt = 227_u
	CXCursor_SEHFinallyStmt = 228_u
	CXCursor_MSAsmStmt = 229_u
	CXCursor_NullStmt = 230_u
	CXCursor_DeclStmt = 231_u
	CXCursor_OMPParallelDirective = 232_u
	CXCursor_OMPSimdDirective = 233_u
	CXCursor_OMPForDirective = 234_u
	CXCursor_OMPSectionsDirective = 235_u
	CXCursor_OMPSectionDirective = 236_u
	CXCursor_OMPSingleDirective = 237_u
	CXCursor_OMPParallelForDirective = 238_u
	CXCursor_OMPParallelSectionsDirective = 239_u
	CXCursor_OMPTaskDirective = 240_u
	CXCursor_OMPMasterDirective = 241_u
	CXCursor_OMPCriticalDirective = 242_u
	CXCursor_OMPTaskyieldDirective = 243_u
	CXCursor_OMPBarrierDirective = 244_u
	CXCursor_OMPTaskwaitDirective = 245_u
	CXCursor_OMPFlushDirective = 246_u
	CXCursor_SEHLeaveStmt = 247_u
	CXCursor_OMPOrderedDirective = 248_u
	CXCursor_OMPAtomicDirective = 249_u
	CXCursor_OMPForSimdDirective = 250_u
	CXCursor_OMPParallelForSimdDirective = 251_u
	CXCursor_OMPTargetDirective = 252_u
	CXCursor_OMPTeamsDirective = 253_u
	CXCursor_OMPTaskgroupDirective = 254_u
	CXCursor_OMPCancellationPointDirective = 255_u
	CXCursor_OMPCancelDirective = 256_u
	CXCursor_OMPTargetDataDirective = 257_u
	CXCursor_OMPTaskLoopDirective = 258_u
	CXCursor_OMPTaskLoopSimdDirective = 259_u
	CXCursor_OMPDistributeDirective = 260_u
	CXCursor_OMPTargetEnterDataDirective = 261_u
	CXCursor_OMPTargetExitDataDirective = 262_u
	CXCursor_OMPTargetParallelDirective = 263_u
	CXCursor_OMPTargetParallelForDirective = 264_u
	CXCursor_OMPTargetUpdateDirective = 265_u
	CXCursor_OMPDistributeParallelForDirective = 266_u
	CXCursor_OMPDistributeParallelForSimdDirective = 267_u
	CXCursor_OMPDistributeSimdDirective = 268_u
	CXCursor_OMPTargetParallelForSimdDirective = 269_u
	CXCursor_OMPTargetSimdDirective = 270_u
	CXCursor_OMPTeamsDistributeDirective = 271_u
	CXCursor_OMPTeamsDistributeSimdDirective = 272_u
	CXCursor_OMPTeamsDistributeParallelForSimdDirective = 273_u
	CXCursor_OMPTeamsDistributeParallelForDirective = 274_u
	CXCursor_OMPTargetTeamsDirective = 275_u
	CXCursor_OMPTargetTeamsDistributeDirective = 276_u
	CXCursor_OMPTargetTeamsDistributeParallelForDirective = 277_u
	CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 278_u
	CXCursor_OMPTargetTeamsDistributeSimdDirective = 279_u
	CXCursor_BuiltinBitCastExpr = 280_u
	CXCursor_LastStmt = 280_u
	CXCursor_TranslationUnit = 300_u
	CXCursor_FirstAttr = 400_u
	CXCursor_UnexposedAttr = 400_u
	CXCursor_IBActionAttr = 401_u
	CXCursor_IBOutletAttr = 402_u
	CXCursor_IBOutletCollectionAttr = 403_u
	CXCursor_CXXFinalAttr = 404_u
	CXCursor_CXXOverrideAttr = 405_u
	CXCursor_AnnotateAttr = 406_u
	CXCursor_AsmLabelAttr = 407_u
	CXCursor_PackedAttr = 408_u
	CXCursor_PureAttr = 409_u
	CXCursor_ConstAttr = 410_u
	CXCursor_NoDuplicateAttr = 411_u
	CXCursor_CUDAConstantAttr = 412_u
	CXCursor_CUDADeviceAttr = 413_u
	CXCursor_CUDAGlobalAttr = 414_u
	CXCursor_CUDAHostAttr = 415_u
	CXCursor_CUDASharedAttr = 416_u
	CXCursor_VisibilityAttr = 417_u
	CXCursor_DLLExport = 418_u
	CXCursor_DLLImport = 419_u
	CXCursor_NSReturnsRetained = 420_u
	CXCursor_NSReturnsNotRetained = 421_u
	CXCursor_NSReturnsAutoreleased = 422_u
	CXCursor_NSConsumesSelf = 423_u
	CXCursor_NSConsumed = 424_u
	CXCursor_ObjCException = 425_u
	CXCursor_ObjCNSObject = 426_u
	CXCursor_ObjCIndependentClass = 427_u
	CXCursor_ObjCPreciseLifetime = 428_u
	CXCursor_ObjCReturnsInnerPointer = 429_u
	CXCursor_ObjCRequiresSuper = 430_u
	CXCursor_ObjCRootClass = 431_u
	CXCursor_ObjCSubclassingRestricted = 432_u
	CXCursor_ObjCExplicitProtocolImpl = 433_u
	CXCursor_ObjCDesignatedInitializer = 434_u
	CXCursor_ObjCRuntimeVisible = 435_u
	CXCursor_ObjCBoxable = 436_u
	CXCursor_FlagEnum = 437_u
	CXCursor_ConvergentAttr = 438_u
	CXCursor_WarnUnusedAttr = 439_u
	CXCursor_WarnUnusedResultAttr = 440_u
	CXCursor_AlignedAttr = 441_u
	CXCursor_LastAttr = 441_u
	CXCursor_PreprocessingDirective = 500_u
	CXCursor_MacroDefinition = 501_u
	CXCursor_MacroExpansion = 502_u
	CXCursor_MacroInstantiation = 502_u
	CXCursor_InclusionDirective = 503_u
	CXCursor_FirstPreprocessing = 500_u
	CXCursor_LastPreprocessing = 503_u
	CXCursor_ModuleImportDecl = 600_u
	CXCursor_TypeAliasTemplateDecl = 601_u
	CXCursor_StaticAssert = 602_u
	CXCursor_FriendDecl = 603_u
	CXCursor_FirstExtraDecl = 600_u
	CXCursor_LastExtraDecl = 603_u
	CXCursor_OverloadCandidate = 700_u
}
CXCursor struct {
	kind CXCursorKind
	xdata int
	data_0 pointer
	data_1 pointer
	data_2 pointer
}
clang_getNullCursor() CXCursor #As("CXCursor") #Foreign("clang_getNullCursor")
clang_getTranslationUnitCursor(p0 pointer #As("CXTranslationUnit")) CXCursor #As("CXCursor") #Foreign("clang_getTranslationUnitCursor")
clang_equalCursors(p0 CXCursor #As("CXCursor"), p1 CXCursor #As("CXCursor")) uint #Foreign("clang_equalCursors")
clang_Cursor_isNull(cursor CXCursor #As("CXCursor")) int #Foreign("clang_Cursor_isNull")
clang_hashCursor(p0 CXCursor #As("CXCursor")) uint #Foreign("clang_hashCursor")
clang_getCursorKind(p0 CXCursor #As("CXCursor")) CXCursorKind #As("enum CXCursorKind") #Foreign("clang_getCursorKind")
clang_isDeclaration(p0 CXCursorKind #As("enum CXCursorKind")) uint #Foreign("clang_isDeclaration")
clang_isInvalidDeclaration(p0 CXCursor #As("CXCursor")) uint #Foreign("clang_isInvalidDeclaration")
clang_isReference(p0 CXCursorKind #As("enum CXCursorKind")) uint #Foreign("clang_isReference")
clang_isExpression(p0 CXCursorKind #As("enum CXCursorKind")) uint #Foreign("clang_isExpression")
clang_isStatement(p0 CXCursorKind #As("enum CXCursorKind")) uint #Foreign("clang_isStatement")
clang_isAttribute(p0 CXCursorKind #As("enum CXCursorKind")) uint #Foreign("clang_isAttribute")
clang_Cursor_hasAttrs(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_hasAttrs")
clang_isInvalid(p0 CXCursorKind #As("enum CXCursorKind")) uint #Foreign("clang_isInvalid")
clang_isTranslationUnit(p0 CXCursorKind #As("enum CXCursorKind")) uint #Foreign("clang_isTranslationUnit")
clang_isPreprocessing(p0 CXCursorKind #As("enum CXCursorKind")) uint #Foreign("clang_isPreprocessing")
clang_isUnexposed(p0 CXCursorKind #As("enum CXCursorKind")) uint #Foreign("clang_isUnexposed")
:CXLinkage_Invalid int = 0
:CXLinkage_NoLinkage int = 1
:CXLinkage_Internal int = 2
:CXLinkage_UniqueExternal int = 3
:CXLinkage_External int = 4
CXLinkageKind enum #Flags {
	CXLinkage_Invalid = 0_u
	CXLinkage_NoLinkage = 1_u
	CXLinkage_Internal = 2_u
	CXLinkage_UniqueExternal = 3_u
	CXLinkage_External = 4_u
}
clang_getCursorLinkage(cursor CXCursor #As("CXCursor")) CXLinkageKind #As("enum CXLinkageKind") #Foreign("clang_getCursorLinkage")
:CXVisibility_Invalid int = 0
:CXVisibility_Hidden int = 1
:CXVisibility_Protected int = 2
:CXVisibility_Default int = 3
CXVisibilityKind enum #Flags {
	CXVisibility_Invalid = 0_u
	CXVisibility_Hidden = 1_u
	CXVisibility_Protected = 2_u
	CXVisibility_Default = 3_u
}
clang_getCursorVisibility(cursor CXCursor #As("CXCursor")) CXVisibilityKind #As("enum CXVisibilityKind") #Foreign("clang_getCursorVisibility")
clang_getCursorAvailability(cursor CXCursor #As("CXCursor")) CXAvailabilityKind #As("enum CXAvailabilityKind") #Foreign("clang_getCursorAvailability")
CXPlatformAvailability struct {
	Platform CXString
	Introduced CXVersion
	Deprecated CXVersion
	Obsoleted CXVersion
	Unavailable int
	Message CXString
}
clang_getCursorPlatformAvailability(cursor CXCursor #As("CXCursor"), always_deprecated *int, deprecated_message *CXString #As("CXString *"), always_unavailable *int, unavailable_message *CXString #As("CXString *"), availability *CXPlatformAvailability #As("CXPlatformAvailability *"), availability_size int) int #Foreign("clang_getCursorPlatformAvailability")
clang_disposeCXPlatformAvailability(availability *CXPlatformAvailability #As("CXPlatformAvailability *")) void #Foreign("clang_disposeCXPlatformAvailability")
:CXLanguage_Invalid int = 0
:CXLanguage_C int = 1
:CXLanguage_ObjC int = 2
:CXLanguage_CPlusPlus int = 3
CXLanguageKind enum #Flags {
	CXLanguage_Invalid = 0_u
	CXLanguage_C = 1_u
	CXLanguage_ObjC = 2_u
	CXLanguage_CPlusPlus = 3_u
}
clang_getCursorLanguage(cursor CXCursor #As("CXCursor")) CXLanguageKind #As("enum CXLanguageKind") #Foreign("clang_getCursorLanguage")
:CXTLS_None int = 0
:CXTLS_Dynamic int = 1
:CXTLS_Static int = 2
CXTLSKind enum #Flags {
	CXTLS_None = 0_u
	CXTLS_Dynamic = 1_u
	CXTLS_Static = 2_u
}
clang_getCursorTLSKind(cursor CXCursor #As("CXCursor")) CXTLSKind #As("enum CXTLSKind") #Foreign("clang_getCursorTLSKind")
clang_Cursor_getTranslationUnit(p0 CXCursor #As("CXCursor")) pointer #As("CXTranslationUnit") #Foreign("clang_Cursor_getTranslationUnit")
clang_createCXCursorSet() pointer #As("CXCursorSet") #Foreign("clang_createCXCursorSet")
clang_disposeCXCursorSet(cset pointer #As("CXCursorSet")) void #Foreign("clang_disposeCXCursorSet")
clang_CXCursorSet_contains(cset pointer #As("CXCursorSet"), cursor CXCursor #As("CXCursor")) uint #Foreign("clang_CXCursorSet_contains")
clang_CXCursorSet_insert(cset pointer #As("CXCursorSet"), cursor CXCursor #As("CXCursor")) uint #Foreign("clang_CXCursorSet_insert")
clang_getCursorSemanticParent(cursor CXCursor #As("CXCursor")) CXCursor #As("CXCursor") #Foreign("clang_getCursorSemanticParent")
clang_getCursorLexicalParent(cursor CXCursor #As("CXCursor")) CXCursor #As("CXCursor") #Foreign("clang_getCursorLexicalParent")
clang_getOverriddenCursors(cursor CXCursor #As("CXCursor"), overridden **CXCursor #As("CXCursor **"), num_overridden *uint) void #Foreign("clang_getOverriddenCursors")
clang_disposeOverriddenCursors(overridden *CXCursor #As("CXCursor *")) void #Foreign("clang_disposeOverriddenCursors")
clang_getIncludedFile(cursor CXCursor #As("CXCursor")) pointer #Foreign("clang_getIncludedFile")
clang_getCursor(p0 pointer #As("CXTranslationUnit"), p1 CXSourceLocation #As("CXSourceLocation")) CXCursor #As("CXCursor") #Foreign("clang_getCursor")
clang_getCursorLocation(p0 CXCursor #As("CXCursor")) CXSourceLocation #As("CXSourceLocation") #Foreign("clang_getCursorLocation")
clang_getCursorExtent(p0 CXCursor #As("CXCursor")) CXSourceRange #As("CXSourceRange") #Foreign("clang_getCursorExtent")
:CXType_Invalid int = 0
:CXType_Unexposed int = 1
:CXType_Void int = 2
:CXType_Bool int = 3
:CXType_Char_U int = 4
:CXType_UChar int = 5
:CXType_Char16 int = 6
:CXType_Char32 int = 7
:CXType_UShort int = 8
:CXType_UInt int = 9
:CXType_ULong int = 10
:CXType_ULongLong int = 11
:CXType_UInt128 int = 12
:CXType_Char_S int = 13
:CXType_SChar int = 14
:CXType_WChar int = 15
:CXType_Short int = 16
:CXType_Int int = 17
:CXType_Long int = 18
:CXType_LongLong int = 19
:CXType_Int128 int = 20
:CXType_Float int = 21
:CXType_Double int = 22
:CXType_LongDouble int = 23
:CXType_NullPtr int = 24
:CXType_Overload int = 25
:CXType_Dependent int = 26
:CXType_ObjCId int = 27
:CXType_ObjCClass int = 28
:CXType_ObjCSel int = 29
:CXType_Float128 int = 30
:CXType_Half int = 31
:CXType_Float16 int = 32
:CXType_ShortAccum int = 33
:CXType_Accum int = 34
:CXType_LongAccum int = 35
:CXType_UShortAccum int = 36
:CXType_UAccum int = 37
:CXType_ULongAccum int = 38
:CXType_FirstBuiltin int = 2
:CXType_LastBuiltin int = 38
:CXType_Complex int = 100
:CXType_Pointer int = 101
:CXType_BlockPointer int = 102
:CXType_LValueReference int = 103
:CXType_RValueReference int = 104
:CXType_Record int = 105
:CXType_Enum int = 106
:CXType_Typedef int = 107
:CXType_ObjCInterface int = 108
:CXType_ObjCObjectPointer int = 109
:CXType_FunctionNoProto int = 110
:CXType_FunctionProto int = 111
:CXType_ConstantArray int = 112
:CXType_Vector int = 113
:CXType_IncompleteArray int = 114
:CXType_VariableArray int = 115
:CXType_DependentSizedArray int = 116
:CXType_MemberPointer int = 117
:CXType_Auto int = 118
:CXType_Elaborated int = 119
:CXType_Pipe int = 120
:CXType_OCLImage1dRO int = 121
:CXType_OCLImage1dArrayRO int = 122
:CXType_OCLImage1dBufferRO int = 123
:CXType_OCLImage2dRO int = 124
:CXType_OCLImage2dArrayRO int = 125
:CXType_OCLImage2dDepthRO int = 126
:CXType_OCLImage2dArrayDepthRO int = 127
:CXType_OCLImage2dMSAARO int = 128
:CXType_OCLImage2dArrayMSAARO int = 129
:CXType_OCLImage2dMSAADepthRO int = 130
:CXType_OCLImage2dArrayMSAADepthRO int = 131
:CXType_OCLImage3dRO int = 132
:CXType_OCLImage1dWO int = 133
:CXType_OCLImage1dArrayWO int = 134
:CXType_OCLImage1dBufferWO int = 135
:CXType_OCLImage2dWO int = 136
:CXType_OCLImage2dArrayWO int = 137
:CXType_OCLImage2dDepthWO int = 138
:CXType_OCLImage2dArrayDepthWO int = 139
:CXType_OCLImage2dMSAAWO int = 140
:CXType_OCLImage2dArrayMSAAWO int = 141
:CXType_OCLImage2dMSAADepthWO int = 142
:CXType_OCLImage2dArrayMSAADepthWO int = 143
:CXType_OCLImage3dWO int = 144
:CXType_OCLImage1dRW int = 145
:CXType_OCLImage1dArrayRW int = 146
:CXType_OCLImage1dBufferRW int = 147
:CXType_OCLImage2dRW int = 148
:CXType_OCLImage2dArrayRW int = 149
:CXType_OCLImage2dDepthRW int = 150
:CXType_OCLImage2dArrayDepthRW int = 151
:CXType_OCLImage2dMSAARW int = 152
:CXType_OCLImage2dArrayMSAARW int = 153
:CXType_OCLImage2dMSAADepthRW int = 154
:CXType_OCLImage2dArrayMSAADepthRW int = 155
:CXType_OCLImage3dRW int = 156
:CXType_OCLSampler int = 157
:CXType_OCLEvent int = 158
:CXType_OCLQueue int = 159
:CXType_OCLReserveID int = 160
:CXType_ObjCObject int = 161
:CXType_ObjCTypeParam int = 162
:CXType_Attributed int = 163
:CXType_OCLIntelSubgroupAVCMcePayload int = 164
:CXType_OCLIntelSubgroupAVCImePayload int = 165
:CXType_OCLIntelSubgroupAVCRefPayload int = 166
:CXType_OCLIntelSubgroupAVCSicPayload int = 167
:CXType_OCLIntelSubgroupAVCMceResult int = 168
:CXType_OCLIntelSubgroupAVCImeResult int = 169
:CXType_OCLIntelSubgroupAVCRefResult int = 170
:CXType_OCLIntelSubgroupAVCSicResult int = 171
:CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout int = 172
:CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout int = 173
:CXType_OCLIntelSubgroupAVCImeSingleRefStreamin int = 174
:CXType_OCLIntelSubgroupAVCImeDualRefStreamin int = 175
:CXType_ExtVector int = 176
CXTypeKind enum #Flags {
	CXType_Invalid = 0_u
	CXType_Unexposed = 1_u
	CXType_Void = 2_u
	CXType_Bool = 3_u
	CXType_Char_U = 4_u
	CXType_UChar = 5_u
	CXType_Char16 = 6_u
	CXType_Char32 = 7_u
	CXType_UShort = 8_u
	CXType_UInt = 9_u
	CXType_ULong = 10_u
	CXType_ULongLong = 11_u
	CXType_UInt128 = 12_u
	CXType_Char_S = 13_u
	CXType_SChar = 14_u
	CXType_WChar = 15_u
	CXType_Short = 16_u
	CXType_Int = 17_u
	CXType_Long = 18_u
	CXType_LongLong = 19_u
	CXType_Int128 = 20_u
	CXType_Float = 21_u
	CXType_Double = 22_u
	CXType_LongDouble = 23_u
	CXType_NullPtr = 24_u
	CXType_Overload = 25_u
	CXType_Dependent = 26_u
	CXType_ObjCId = 27_u
	CXType_ObjCClass = 28_u
	CXType_ObjCSel = 29_u
	CXType_Float128 = 30_u
	CXType_Half = 31_u
	CXType_Float16 = 32_u
	CXType_ShortAccum = 33_u
	CXType_Accum = 34_u
	CXType_LongAccum = 35_u
	CXType_UShortAccum = 36_u
	CXType_UAccum = 37_u
	CXType_ULongAccum = 38_u
	CXType_FirstBuiltin = 2_u
	CXType_LastBuiltin = 38_u
	CXType_Complex = 100_u
	CXType_Pointer = 101_u
	CXType_BlockPointer = 102_u
	CXType_LValueReference = 103_u
	CXType_RValueReference = 104_u
	CXType_Record = 105_u
	CXType_Enum = 106_u
	CXType_Typedef = 107_u
	CXType_ObjCInterface = 108_u
	CXType_ObjCObjectPointer = 109_u
	CXType_FunctionNoProto = 110_u
	CXType_FunctionProto = 111_u
	CXType_ConstantArray = 112_u
	CXType_Vector = 113_u
	CXType_IncompleteArray = 114_u
	CXType_VariableArray = 115_u
	CXType_DependentSizedArray = 116_u
	CXType_MemberPointer = 117_u
	CXType_Auto = 118_u
	CXType_Elaborated = 119_u
	CXType_Pipe = 120_u
	CXType_OCLImage1dRO = 121_u
	CXType_OCLImage1dArrayRO = 122_u
	CXType_OCLImage1dBufferRO = 123_u
	CXType_OCLImage2dRO = 124_u
	CXType_OCLImage2dArrayRO = 125_u
	CXType_OCLImage2dDepthRO = 126_u
	CXType_OCLImage2dArrayDepthRO = 127_u
	CXType_OCLImage2dMSAARO = 128_u
	CXType_OCLImage2dArrayMSAARO = 129_u
	CXType_OCLImage2dMSAADepthRO = 130_u
	CXType_OCLImage2dArrayMSAADepthRO = 131_u
	CXType_OCLImage3dRO = 132_u
	CXType_OCLImage1dWO = 133_u
	CXType_OCLImage1dArrayWO = 134_u
	CXType_OCLImage1dBufferWO = 135_u
	CXType_OCLImage2dWO = 136_u
	CXType_OCLImage2dArrayWO = 137_u
	CXType_OCLImage2dDepthWO = 138_u
	CXType_OCLImage2dArrayDepthWO = 139_u
	CXType_OCLImage2dMSAAWO = 140_u
	CXType_OCLImage2dArrayMSAAWO = 141_u
	CXType_OCLImage2dMSAADepthWO = 142_u
	CXType_OCLImage2dArrayMSAADepthWO = 143_u
	CXType_OCLImage3dWO = 144_u
	CXType_OCLImage1dRW = 145_u
	CXType_OCLImage1dArrayRW = 146_u
	CXType_OCLImage1dBufferRW = 147_u
	CXType_OCLImage2dRW = 148_u
	CXType_OCLImage2dArrayRW = 149_u
	CXType_OCLImage2dDepthRW = 150_u
	CXType_OCLImage2dArrayDepthRW = 151_u
	CXType_OCLImage2dMSAARW = 152_u
	CXType_OCLImage2dArrayMSAARW = 153_u
	CXType_OCLImage2dMSAADepthRW = 154_u
	CXType_OCLImage2dArrayMSAADepthRW = 155_u
	CXType_OCLImage3dRW = 156_u
	CXType_OCLSampler = 157_u
	CXType_OCLEvent = 158_u
	CXType_OCLQueue = 159_u
	CXType_OCLReserveID = 160_u
	CXType_ObjCObject = 161_u
	CXType_ObjCTypeParam = 162_u
	CXType_Attributed = 163_u
	CXType_OCLIntelSubgroupAVCMcePayload = 164_u
	CXType_OCLIntelSubgroupAVCImePayload = 165_u
	CXType_OCLIntelSubgroupAVCRefPayload = 166_u
	CXType_OCLIntelSubgroupAVCSicPayload = 167_u
	CXType_OCLIntelSubgroupAVCMceResult = 168_u
	CXType_OCLIntelSubgroupAVCImeResult = 169_u
	CXType_OCLIntelSubgroupAVCRefResult = 170_u
	CXType_OCLIntelSubgroupAVCSicResult = 171_u
	CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172_u
	CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173_u
	CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174_u
	CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175_u
	CXType_ExtVector = 176_u
}
:CXCallingConv_Default int = 0
:CXCallingConv_C int = 1
:CXCallingConv_X86StdCall int = 2
:CXCallingConv_X86FastCall int = 3
:CXCallingConv_X86ThisCall int = 4
:CXCallingConv_X86Pascal int = 5
:CXCallingConv_AAPCS int = 6
:CXCallingConv_AAPCS_VFP int = 7
:CXCallingConv_X86RegCall int = 8
:CXCallingConv_IntelOclBicc int = 9
:CXCallingConv_Win64 int = 10
:CXCallingConv_X86_64Win64 int = 10
:CXCallingConv_X86_64SysV int = 11
:CXCallingConv_X86VectorCall int = 12
:CXCallingConv_Swift int = 13
:CXCallingConv_PreserveMost int = 14
:CXCallingConv_PreserveAll int = 15
:CXCallingConv_AArch64VectorCall int = 16
:CXCallingConv_Invalid int = 100
:CXCallingConv_Unexposed int = 200
CXCallingConv enum #Flags {
	CXCallingConv_Default = 0_u
	CXCallingConv_C = 1_u
	CXCallingConv_X86StdCall = 2_u
	CXCallingConv_X86FastCall = 3_u
	CXCallingConv_X86ThisCall = 4_u
	CXCallingConv_X86Pascal = 5_u
	CXCallingConv_AAPCS = 6_u
	CXCallingConv_AAPCS_VFP = 7_u
	CXCallingConv_X86RegCall = 8_u
	CXCallingConv_IntelOclBicc = 9_u
	CXCallingConv_Win64 = 10_u
	CXCallingConv_X86_64Win64 = 10_u
	CXCallingConv_X86_64SysV = 11_u
	CXCallingConv_X86VectorCall = 12_u
	CXCallingConv_Swift = 13_u
	CXCallingConv_PreserveMost = 14_u
	CXCallingConv_PreserveAll = 15_u
	CXCallingConv_AArch64VectorCall = 16_u
	CXCallingConv_Invalid = 100_u
	CXCallingConv_Unexposed = 200_u
}
CXType struct {
	kind CXTypeKind
	data_0 pointer
	data_1 pointer
}
clang_getCursorType(C CXCursor #As("CXCursor")) CXType #As("CXType") #Foreign("clang_getCursorType")
clang_getTypeSpelling(CT CXType #As("CXType")) CXString #As("CXString") #Foreign("clang_getTypeSpelling")
clang_getTypedefDeclUnderlyingType(C CXCursor #As("CXCursor")) CXType #As("CXType") #Foreign("clang_getTypedefDeclUnderlyingType")
clang_getEnumDeclIntegerType(C CXCursor #As("CXCursor")) CXType #As("CXType") #Foreign("clang_getEnumDeclIntegerType")
clang_getEnumConstantDeclValue(C CXCursor #As("CXCursor")) long #Foreign("clang_getEnumConstantDeclValue")
clang_getEnumConstantDeclUnsignedValue(C CXCursor #As("CXCursor")) ulong #Foreign("clang_getEnumConstantDeclUnsignedValue")
clang_getFieldDeclBitWidth(C CXCursor #As("CXCursor")) int #Foreign("clang_getFieldDeclBitWidth")
clang_Cursor_getNumArguments(C CXCursor #As("CXCursor")) int #Foreign("clang_Cursor_getNumArguments")
clang_Cursor_getArgument(C CXCursor #As("CXCursor"), i uint) CXCursor #As("CXCursor") #Foreign("clang_Cursor_getArgument")
:CXTemplateArgumentKind_Null int = 0
:CXTemplateArgumentKind_Type int = 1
:CXTemplateArgumentKind_Declaration int = 2
:CXTemplateArgumentKind_NullPtr int = 3
:CXTemplateArgumentKind_Integral int = 4
:CXTemplateArgumentKind_Template int = 5
:CXTemplateArgumentKind_TemplateExpansion int = 6
:CXTemplateArgumentKind_Expression int = 7
:CXTemplateArgumentKind_Pack int = 8
:CXTemplateArgumentKind_Invalid int = 9
CXTemplateArgumentKind enum #Flags {
	CXTemplateArgumentKind_Null = 0_u
	CXTemplateArgumentKind_Type = 1_u
	CXTemplateArgumentKind_Declaration = 2_u
	CXTemplateArgumentKind_NullPtr = 3_u
	CXTemplateArgumentKind_Integral = 4_u
	CXTemplateArgumentKind_Template = 5_u
	CXTemplateArgumentKind_TemplateExpansion = 6_u
	CXTemplateArgumentKind_Expression = 7_u
	CXTemplateArgumentKind_Pack = 8_u
	CXTemplateArgumentKind_Invalid = 9_u
}
clang_Cursor_getNumTemplateArguments(C CXCursor #As("CXCursor")) int #Foreign("clang_Cursor_getNumTemplateArguments")
clang_Cursor_getTemplateArgumentKind(C CXCursor #As("CXCursor"), I uint) CXTemplateArgumentKind #As("enum CXTemplateArgumentKind") #Foreign("clang_Cursor_getTemplateArgumentKind")
clang_Cursor_getTemplateArgumentType(C CXCursor #As("CXCursor"), I uint) CXType #As("CXType") #Foreign("clang_Cursor_getTemplateArgumentType")
clang_Cursor_getTemplateArgumentValue(C CXCursor #As("CXCursor"), I uint) long #Foreign("clang_Cursor_getTemplateArgumentValue")
clang_Cursor_getTemplateArgumentUnsignedValue(C CXCursor #As("CXCursor"), I uint) ulong #Foreign("clang_Cursor_getTemplateArgumentUnsignedValue")
clang_equalTypes(A CXType #As("CXType"), B CXType #As("CXType")) uint #Foreign("clang_equalTypes")
clang_getCanonicalType(T CXType #As("CXType")) CXType #As("CXType") #Foreign("clang_getCanonicalType")
clang_isConstQualifiedType(T CXType #As("CXType")) uint #Foreign("clang_isConstQualifiedType")
clang_Cursor_isMacroFunctionLike(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_isMacroFunctionLike")
clang_Cursor_isMacroBuiltin(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_isMacroBuiltin")
clang_Cursor_isFunctionInlined(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_isFunctionInlined")
clang_isVolatileQualifiedType(T CXType #As("CXType")) uint #Foreign("clang_isVolatileQualifiedType")
clang_isRestrictQualifiedType(T CXType #As("CXType")) uint #Foreign("clang_isRestrictQualifiedType")
clang_getAddressSpace(T CXType #As("CXType")) uint #Foreign("clang_getAddressSpace")
clang_getTypedefName(CT CXType #As("CXType")) CXString #As("CXString") #Foreign("clang_getTypedefName")
clang_getPointeeType(T CXType #As("CXType")) CXType #As("CXType") #Foreign("clang_getPointeeType")
clang_getTypeDeclaration(T CXType #As("CXType")) CXCursor #As("CXCursor") #Foreign("clang_getTypeDeclaration")
clang_getDeclObjCTypeEncoding(C CXCursor #As("CXCursor")) CXString #As("CXString") #Foreign("clang_getDeclObjCTypeEncoding")
clang_Type_getObjCEncoding(type CXType #As("CXType")) CXString #As("CXString") #Foreign("clang_Type_getObjCEncoding")
clang_getTypeKindSpelling(K CXTypeKind #As("enum CXTypeKind")) CXString #As("CXString") #Foreign("clang_getTypeKindSpelling")
clang_getFunctionTypeCallingConv(T CXType #As("CXType")) CXCallingConv #As("enum CXCallingConv") #Foreign("clang_getFunctionTypeCallingConv")
clang_getResultType(T CXType #As("CXType")) CXType #As("CXType") #Foreign("clang_getResultType")
clang_getExceptionSpecificationType(T CXType #As("CXType")) int #Foreign("clang_getExceptionSpecificationType")
clang_getNumArgTypes(T CXType #As("CXType")) int #Foreign("clang_getNumArgTypes")
clang_getArgType(T CXType #As("CXType"), i uint) CXType #As("CXType") #Foreign("clang_getArgType")
clang_Type_getObjCObjectBaseType(T CXType #As("CXType")) CXType #As("CXType") #Foreign("clang_Type_getObjCObjectBaseType")
clang_Type_getNumObjCProtocolRefs(T CXType #As("CXType")) uint #Foreign("clang_Type_getNumObjCProtocolRefs")
clang_Type_getObjCProtocolDecl(T CXType #As("CXType"), i uint) CXCursor #As("CXCursor") #Foreign("clang_Type_getObjCProtocolDecl")
clang_Type_getNumObjCTypeArgs(T CXType #As("CXType")) uint #Foreign("clang_Type_getNumObjCTypeArgs")
clang_Type_getObjCTypeArg(T CXType #As("CXType"), i uint) CXType #As("CXType") #Foreign("clang_Type_getObjCTypeArg")
clang_isFunctionTypeVariadic(T CXType #As("CXType")) uint #Foreign("clang_isFunctionTypeVariadic")
clang_getCursorResultType(C CXCursor #As("CXCursor")) CXType #As("CXType") #Foreign("clang_getCursorResultType")
clang_getCursorExceptionSpecificationType(C CXCursor #As("CXCursor")) int #Foreign("clang_getCursorExceptionSpecificationType")
clang_isPODType(T CXType #As("CXType")) uint #Foreign("clang_isPODType")
clang_getElementType(T CXType #As("CXType")) CXType #As("CXType") #Foreign("clang_getElementType")
clang_getNumElements(T CXType #As("CXType")) long #Foreign("clang_getNumElements")
clang_getArrayElementType(T CXType #As("CXType")) CXType #As("CXType") #Foreign("clang_getArrayElementType")
clang_getArraySize(T CXType #As("CXType")) long #Foreign("clang_getArraySize")
clang_Type_getNamedType(T CXType #As("CXType")) CXType #As("CXType") #Foreign("clang_Type_getNamedType")
clang_Type_isTransparentTagTypedef(T CXType #As("CXType")) uint #Foreign("clang_Type_isTransparentTagTypedef")
:CXTypeNullability_NonNull int = 0
:CXTypeNullability_Nullable int = 1
:CXTypeNullability_Unspecified int = 2
:CXTypeNullability_Invalid int = 3
CXTypeNullabilityKind enum #Flags {
	CXTypeNullability_NonNull = 0_u
	CXTypeNullability_Nullable = 1_u
	CXTypeNullability_Unspecified = 2_u
	CXTypeNullability_Invalid = 3_u
}
clang_Type_getNullability(T CXType #As("CXType")) CXTypeNullabilityKind #As("enum CXTypeNullabilityKind") #Foreign("clang_Type_getNullability")
:CXTypeLayoutError_Invalid_ffigen_modified int = -1
:CXTypeLayoutError_Incomplete_ffigen_modified int = -2
:CXTypeLayoutError_Dependent_ffigen_modified int = -3
:CXTypeLayoutError_NotConstantSize_ffigen_modified int = -4
:CXTypeLayoutError_InvalidFieldName_ffigen_modified int = -5
:CXTypeLayoutError_Undeduced_ffigen_modified int = -6
CXTypeLayoutError enum #Flags {
	CXTypeLayoutError_Invalid_ffigen_modified = 4294967295_u
	CXTypeLayoutError_Incomplete_ffigen_modified = 4294967294_u
	CXTypeLayoutError_Dependent_ffigen_modified = 4294967293_u
	CXTypeLayoutError_NotConstantSize_ffigen_modified = 4294967292_u
	CXTypeLayoutError_InvalidFieldName_ffigen_modified = 4294967291_u
	CXTypeLayoutError_Undeduced_ffigen_modified = 4294967290_u
}
clang_Type_getAlignOf(T CXType #As("CXType")) long #Foreign("clang_Type_getAlignOf")
clang_Type_getClassType(T CXType #As("CXType")) CXType #As("CXType") #Foreign("clang_Type_getClassType")
clang_Type_getSizeOf(T CXType #As("CXType")) long #Foreign("clang_Type_getSizeOf")
clang_Type_getOffsetOf(T CXType #As("CXType"), S *sbyte) long #Foreign("clang_Type_getOffsetOf")
clang_Type_getModifiedType(T CXType #As("CXType")) CXType #As("CXType") #Foreign("clang_Type_getModifiedType")
clang_Cursor_getOffsetOfField(C CXCursor #As("CXCursor")) long #Foreign("clang_Cursor_getOffsetOfField")
clang_Cursor_isAnonymous(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_isAnonymous")
clang_Cursor_isAnonymousRecordDecl(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_isAnonymousRecordDecl")
clang_Cursor_isInlineNamespace(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_isInlineNamespace")
:CXRefQualifier_None int = 0
:CXRefQualifier_LValue int = 1
:CXRefQualifier_RValue int = 2
CXRefQualifierKind enum #Flags {
	CXRefQualifier_None = 0_u
	CXRefQualifier_LValue = 1_u
	CXRefQualifier_RValue = 2_u
}
clang_Type_getNumTemplateArguments(T CXType #As("CXType")) int #Foreign("clang_Type_getNumTemplateArguments")
clang_Type_getTemplateArgumentAsType(T CXType #As("CXType"), i uint) CXType #As("CXType") #Foreign("clang_Type_getTemplateArgumentAsType")
clang_Type_getCXXRefQualifier(T CXType #As("CXType")) CXRefQualifierKind #As("enum CXRefQualifierKind") #Foreign("clang_Type_getCXXRefQualifier")
clang_Cursor_isBitField(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_isBitField")
clang_isVirtualBase(p0 CXCursor #As("CXCursor")) uint #Foreign("clang_isVirtualBase")
:CX_CXXInvalidAccessSpecifier int = 0
:CX_CXXPublic int = 1
:CX_CXXProtected int = 2
:CX_CXXPrivate int = 3
CX_CXXAccessSpecifier enum #Flags {
	CX_CXXInvalidAccessSpecifier = 0_u
	CX_CXXPublic = 1_u
	CX_CXXProtected = 2_u
	CX_CXXPrivate = 3_u
}
clang_getCXXAccessSpecifier(p0 CXCursor #As("CXCursor")) CX_CXXAccessSpecifier #As("enum CX_CXXAccessSpecifier") #Foreign("clang_getCXXAccessSpecifier")
:CX_SC_Invalid int = 0
:CX_SC_None int = 1
:CX_SC_Extern int = 2
:CX_SC_Static int = 3
:CX_SC_PrivateExtern int = 4
:CX_SC_OpenCLWorkGroupLocal int = 5
:CX_SC_Auto int = 6
:CX_SC_Register int = 7
CX_StorageClass enum #Flags {
	CX_SC_Invalid = 0_u
	CX_SC_None = 1_u
	CX_SC_Extern = 2_u
	CX_SC_Static = 3_u
	CX_SC_PrivateExtern = 4_u
	CX_SC_OpenCLWorkGroupLocal = 5_u
	CX_SC_Auto = 6_u
	CX_SC_Register = 7_u
}
clang_Cursor_getStorageClass(p0 CXCursor #As("CXCursor")) CX_StorageClass #As("enum CX_StorageClass") #Foreign("clang_Cursor_getStorageClass")
clang_getNumOverloadedDecls(cursor CXCursor #As("CXCursor")) uint #Foreign("clang_getNumOverloadedDecls")
clang_getOverloadedDecl(cursor CXCursor #As("CXCursor"), index uint) CXCursor #As("CXCursor") #Foreign("clang_getOverloadedDecl")
clang_getIBOutletCollectionType(p0 CXCursor #As("CXCursor")) CXType #As("CXType") #Foreign("clang_getIBOutletCollectionType")
:CXChildVisit_Break int = 0
:CXChildVisit_Continue int = 1
:CXChildVisit_Recurse int = 2
CXChildVisitResult enum #Flags {
	CXChildVisit_Break = 0_u
	CXChildVisit_Continue = 1_u
	CXChildVisit_Recurse = 2_u
}
clang_visitChildren(parent CXCursor #As("CXCursor"), visitor pointer #As("CXCursorVisitor"), client_data pointer) uint #Foreign("clang_visitChildren")
clang_getCursorUSR(p0 CXCursor #As("CXCursor")) CXString #As("CXString") #Foreign("clang_getCursorUSR")
clang_constructUSR_ObjCClass(class_name *sbyte) CXString #As("CXString") #Foreign("clang_constructUSR_ObjCClass")
clang_constructUSR_ObjCCategory(class_name *sbyte, category_name *sbyte) CXString #As("CXString") #Foreign("clang_constructUSR_ObjCCategory")
clang_constructUSR_ObjCProtocol(protocol_name *sbyte) CXString #As("CXString") #Foreign("clang_constructUSR_ObjCProtocol")
clang_constructUSR_ObjCIvar(name *sbyte, classUSR CXString #As("CXString")) CXString #As("CXString") #Foreign("clang_constructUSR_ObjCIvar")
clang_constructUSR_ObjCMethod(name *sbyte, isInstanceMethod uint, classUSR CXString #As("CXString")) CXString #As("CXString") #Foreign("clang_constructUSR_ObjCMethod")
clang_constructUSR_ObjCProperty(property *sbyte, classUSR CXString #As("CXString")) CXString #As("CXString") #Foreign("clang_constructUSR_ObjCProperty")
clang_getCursorSpelling(p0 CXCursor #As("CXCursor")) CXString #As("CXString") #Foreign("clang_getCursorSpelling")
clang_Cursor_getSpellingNameRange(p0 CXCursor #As("CXCursor"), pieceIndex uint, options uint) CXSourceRange #As("CXSourceRange") #Foreign("clang_Cursor_getSpellingNameRange")
:CXPrintingPolicy_Indentation int = 0
:CXPrintingPolicy_SuppressSpecifiers int = 1
:CXPrintingPolicy_SuppressTagKeyword int = 2
:CXPrintingPolicy_IncludeTagDefinition int = 3
:CXPrintingPolicy_SuppressScope int = 4
:CXPrintingPolicy_SuppressUnwrittenScope int = 5
:CXPrintingPolicy_SuppressInitializers int = 6
:CXPrintingPolicy_ConstantArraySizeAsWritten int = 7
:CXPrintingPolicy_AnonymousTagLocations int = 8
:CXPrintingPolicy_SuppressStrongLifetime int = 9
:CXPrintingPolicy_SuppressLifetimeQualifiers int = 10
:CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors int = 11
:CXPrintingPolicy_Bool int = 12
:CXPrintingPolicy_Restrict int = 13
:CXPrintingPolicy_Alignof int = 14
:CXPrintingPolicy_UnderscoreAlignof int = 15
:CXPrintingPolicy_UseVoidForZeroParams int = 16
:CXPrintingPolicy_TerseOutput int = 17
:CXPrintingPolicy_PolishForDeclaration int = 18
:CXPrintingPolicy_Half int = 19
:CXPrintingPolicy_MSWChar int = 20
:CXPrintingPolicy_IncludeNewlines int = 21
:CXPrintingPolicy_MSVCFormatting int = 22
:CXPrintingPolicy_ConstantsAsWritten int = 23
:CXPrintingPolicy_SuppressImplicitBase int = 24
:CXPrintingPolicy_FullyQualifiedName int = 25
:CXPrintingPolicy_LastProperty int = 25
CXPrintingPolicyProperty enum #Flags {
	CXPrintingPolicy_Indentation = 0_u
	CXPrintingPolicy_SuppressSpecifiers = 1_u
	CXPrintingPolicy_SuppressTagKeyword = 2_u
	CXPrintingPolicy_IncludeTagDefinition = 3_u
	CXPrintingPolicy_SuppressScope = 4_u
	CXPrintingPolicy_SuppressUnwrittenScope = 5_u
	CXPrintingPolicy_SuppressInitializers = 6_u
	CXPrintingPolicy_ConstantArraySizeAsWritten = 7_u
	CXPrintingPolicy_AnonymousTagLocations = 8_u
	CXPrintingPolicy_SuppressStrongLifetime = 9_u
	CXPrintingPolicy_SuppressLifetimeQualifiers = 10_u
	CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = 11_u
	CXPrintingPolicy_Bool = 12_u
	CXPrintingPolicy_Restrict = 13_u
	CXPrintingPolicy_Alignof = 14_u
	CXPrintingPolicy_UnderscoreAlignof = 15_u
	CXPrintingPolicy_UseVoidForZeroParams = 16_u
	CXPrintingPolicy_TerseOutput = 17_u
	CXPrintingPolicy_PolishForDeclaration = 18_u
	CXPrintingPolicy_Half = 19_u
	CXPrintingPolicy_MSWChar = 20_u
	CXPrintingPolicy_IncludeNewlines = 21_u
	CXPrintingPolicy_MSVCFormatting = 22_u
	CXPrintingPolicy_ConstantsAsWritten = 23_u
	CXPrintingPolicy_SuppressImplicitBase = 24_u
	CXPrintingPolicy_FullyQualifiedName = 25_u
	CXPrintingPolicy_LastProperty = 25_u
}
clang_PrintingPolicy_getProperty(Policy pointer, Property CXPrintingPolicyProperty #As("enum CXPrintingPolicyProperty")) uint #Foreign("clang_PrintingPolicy_getProperty")
clang_PrintingPolicy_setProperty(Policy pointer, Property CXPrintingPolicyProperty #As("enum CXPrintingPolicyProperty"), Value uint) void #Foreign("clang_PrintingPolicy_setProperty")
clang_getCursorPrintingPolicy(p0 CXCursor #As("CXCursor")) pointer #Foreign("clang_getCursorPrintingPolicy")
clang_PrintingPolicy_dispose(Policy pointer) void #Foreign("clang_PrintingPolicy_dispose")
clang_getCursorPrettyPrinted(Cursor CXCursor #As("CXCursor"), Policy pointer) CXString #As("CXString") #Foreign("clang_getCursorPrettyPrinted")
clang_getCursorDisplayName(p0 CXCursor #As("CXCursor")) CXString #As("CXString") #Foreign("clang_getCursorDisplayName")
clang_getCursorReferenced(p0 CXCursor #As("CXCursor")) CXCursor #As("CXCursor") #Foreign("clang_getCursorReferenced")
clang_getCursorDefinition(p0 CXCursor #As("CXCursor")) CXCursor #As("CXCursor") #Foreign("clang_getCursorDefinition")
clang_isCursorDefinition(p0 CXCursor #As("CXCursor")) uint #Foreign("clang_isCursorDefinition")
clang_getCanonicalCursor(p0 CXCursor #As("CXCursor")) CXCursor #As("CXCursor") #Foreign("clang_getCanonicalCursor")
clang_Cursor_getObjCSelectorIndex(p0 CXCursor #As("CXCursor")) int #Foreign("clang_Cursor_getObjCSelectorIndex")
clang_Cursor_isDynamicCall(C CXCursor #As("CXCursor")) int #Foreign("clang_Cursor_isDynamicCall")
clang_Cursor_getReceiverType(C CXCursor #As("CXCursor")) CXType #As("CXType") #Foreign("clang_Cursor_getReceiverType")
:CXObjCPropertyAttr_noattr int = 0
:CXObjCPropertyAttr_readonly int = 1
:CXObjCPropertyAttr_getter int = 2
:CXObjCPropertyAttr_assign int = 4
:CXObjCPropertyAttr_readwrite int = 8
:CXObjCPropertyAttr_retain int = 16
:CXObjCPropertyAttr_copy int = 32
:CXObjCPropertyAttr_nonatomic int = 64
:CXObjCPropertyAttr_setter int = 128
:CXObjCPropertyAttr_atomic int = 256
:CXObjCPropertyAttr_weak int = 512
:CXObjCPropertyAttr_strong int = 1024
:CXObjCPropertyAttr_unsafe_unretained int = 2048
:CXObjCPropertyAttr_class int = 4096
CXObjCPropertyAttrKind enum #Flags {
	CXObjCPropertyAttr_noattr = 0_u
	CXObjCPropertyAttr_readonly = 1_u
	CXObjCPropertyAttr_getter = 2_u
	CXObjCPropertyAttr_assign = 4_u
	CXObjCPropertyAttr_readwrite = 8_u
	CXObjCPropertyAttr_retain = 16_u
	CXObjCPropertyAttr_copy = 32_u
	CXObjCPropertyAttr_nonatomic = 64_u
	CXObjCPropertyAttr_setter = 128_u
	CXObjCPropertyAttr_atomic = 256_u
	CXObjCPropertyAttr_weak = 512_u
	CXObjCPropertyAttr_strong = 1024_u
	CXObjCPropertyAttr_unsafe_unretained = 2048_u
	CXObjCPropertyAttr_class = 4096_u
}
clang_Cursor_getObjCPropertyAttributes(C CXCursor #As("CXCursor"), reserved uint) uint #Foreign("clang_Cursor_getObjCPropertyAttributes")
clang_Cursor_getObjCPropertyGetterName(C CXCursor #As("CXCursor")) CXString #As("CXString") #Foreign("clang_Cursor_getObjCPropertyGetterName")
clang_Cursor_getObjCPropertySetterName(C CXCursor #As("CXCursor")) CXString #As("CXString") #Foreign("clang_Cursor_getObjCPropertySetterName")
:CXObjCDeclQualifier_None int = 0
:CXObjCDeclQualifier_In int = 1
:CXObjCDeclQualifier_Inout int = 2
:CXObjCDeclQualifier_Out int = 4
:CXObjCDeclQualifier_Bycopy int = 8
:CXObjCDeclQualifier_Byref int = 16
:CXObjCDeclQualifier_Oneway int = 32
CXObjCDeclQualifierKind enum #Flags {
	CXObjCDeclQualifier_None = 0_u
	CXObjCDeclQualifier_In = 1_u
	CXObjCDeclQualifier_Inout = 2_u
	CXObjCDeclQualifier_Out = 4_u
	CXObjCDeclQualifier_Bycopy = 8_u
	CXObjCDeclQualifier_Byref = 16_u
	CXObjCDeclQualifier_Oneway = 32_u
}
clang_Cursor_getObjCDeclQualifiers(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_getObjCDeclQualifiers")
clang_Cursor_isObjCOptional(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_isObjCOptional")
clang_Cursor_isVariadic(C CXCursor #As("CXCursor")) uint #Foreign("clang_Cursor_isVariadic")
clang_Cursor_isExternalSymbol(C CXCursor #As("CXCursor"), language *CXString #As("CXString *"), definedIn *CXString #As("CXString *"), isGenerated *uint) uint #Foreign("clang_Cursor_isExternalSymbol")
clang_Cursor_getCommentRange(C CXCursor #As("CXCursor")) CXSourceRange #As("CXSourceRange") #Foreign("clang_Cursor_getCommentRange")
clang_Cursor_getRawCommentText(C CXCursor #As("CXCursor")) CXString #As("CXString") #Foreign("clang_Cursor_getRawCommentText")
clang_Cursor_getBriefCommentText(C CXCursor #As("CXCursor")) CXString #As("CXString") #Foreign("clang_Cursor_getBriefCommentText")
clang_Cursor_getMangling(p0 CXCursor #As("CXCursor")) CXString #As("CXString") #Foreign("clang_Cursor_getMangling")
clang_Cursor_getCXXManglings(p0 CXCursor #As("CXCursor")) *CXStringSet #As("CXStringSet *") #Foreign("clang_Cursor_getCXXManglings")
clang_Cursor_getObjCManglings(p0 CXCursor #As("CXCursor")) *CXStringSet #As("CXStringSet *") #Foreign("clang_Cursor_getObjCManglings")
clang_Cursor_getModule(C CXCursor #As("CXCursor")) pointer #Foreign("clang_Cursor_getModule")
clang_getModuleForFile(p0 pointer #As("CXTranslationUnit"), p1 pointer) pointer #Foreign("clang_getModuleForFile")
clang_Module_getASTFile(Module pointer) pointer #Foreign("clang_Module_getASTFile")
clang_Module_getParent(Module pointer) pointer #Foreign("clang_Module_getParent")
clang_Module_getName(Module pointer) CXString #As("CXString") #Foreign("clang_Module_getName")
clang_Module_getFullName(Module pointer) CXString #As("CXString") #Foreign("clang_Module_getFullName")
clang_Module_isSystem(Module pointer) int #Foreign("clang_Module_isSystem")
clang_Module_getNumTopLevelHeaders(p0 pointer #As("CXTranslationUnit"), Module pointer) uint #Foreign("clang_Module_getNumTopLevelHeaders")
clang_Module_getTopLevelHeader(p0 pointer #As("CXTranslationUnit"), Module pointer, Index uint) pointer #Foreign("clang_Module_getTopLevelHeader")
clang_CXXConstructor_isConvertingConstructor(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXConstructor_isConvertingConstructor")
clang_CXXConstructor_isCopyConstructor(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXConstructor_isCopyConstructor")
clang_CXXConstructor_isDefaultConstructor(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXConstructor_isDefaultConstructor")
clang_CXXConstructor_isMoveConstructor(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXConstructor_isMoveConstructor")
clang_CXXField_isMutable(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXField_isMutable")
clang_CXXMethod_isDefaulted(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXMethod_isDefaulted")
clang_CXXMethod_isPureVirtual(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXMethod_isPureVirtual")
clang_CXXMethod_isStatic(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXMethod_isStatic")
clang_CXXMethod_isVirtual(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXMethod_isVirtual")
clang_CXXRecord_isAbstract(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXRecord_isAbstract")
clang_EnumDecl_isScoped(C CXCursor #As("CXCursor")) uint #Foreign("clang_EnumDecl_isScoped")
clang_CXXMethod_isConst(C CXCursor #As("CXCursor")) uint #Foreign("clang_CXXMethod_isConst")
clang_getTemplateCursorKind(C CXCursor #As("CXCursor")) CXCursorKind #As("enum CXCursorKind") #Foreign("clang_getTemplateCursorKind")
clang_getSpecializedCursorTemplate(C CXCursor #As("CXCursor")) CXCursor #As("CXCursor") #Foreign("clang_getSpecializedCursorTemplate")
clang_getCursorReferenceNameRange(C CXCursor #As("CXCursor"), NameFlags uint, PieceIndex uint) CXSourceRange #As("CXSourceRange") #Foreign("clang_getCursorReferenceNameRange")
:CXNameRange_WantQualifier int = 1
:CXNameRange_WantTemplateArgs int = 2
:CXNameRange_WantSinglePiece int = 4
CXNameRefFlags enum #Flags {
	CXNameRange_WantQualifier = 1_u
	CXNameRange_WantTemplateArgs = 2_u
	CXNameRange_WantSinglePiece = 4_u
}
:CXToken_Punctuation int = 0
:CXToken_Keyword int = 1
:CXToken_Identifier int = 2
:CXToken_Literal int = 3
:CXToken_Comment int = 4
CXTokenKind enum #Flags {
	CXToken_Punctuation = 0_u
	CXToken_Keyword = 1_u
	CXToken_Identifier = 2_u
	CXToken_Literal = 3_u
	CXToken_Comment = 4_u
}
CXToken struct {
	int_data_0 uint
	int_data_1 uint
	int_data_2 uint
	int_data_3 uint
	ptr_data pointer
}
clang_getToken(TU pointer #As("CXTranslationUnit"), Location CXSourceLocation #As("CXSourceLocation")) *CXToken #As("CXToken *") #Foreign("clang_getToken")
clang_getTokenKind(p0 CXToken #As("CXToken")) CXTokenKind #As("CXTokenKind") #Foreign("clang_getTokenKind")
clang_getTokenSpelling(p0 pointer #As("CXTranslationUnit"), p1 CXToken #As("CXToken")) CXString #As("CXString") #Foreign("clang_getTokenSpelling")
clang_getTokenLocation(p0 pointer #As("CXTranslationUnit"), p1 CXToken #As("CXToken")) CXSourceLocation #As("CXSourceLocation") #Foreign("clang_getTokenLocation")
clang_getTokenExtent(p0 pointer #As("CXTranslationUnit"), p1 CXToken #As("CXToken")) CXSourceRange #As("CXSourceRange") #Foreign("clang_getTokenExtent")
clang_tokenize(TU pointer #As("CXTranslationUnit"), Range CXSourceRange #As("CXSourceRange"), Tokens **CXToken #As("CXToken **"), NumTokens *uint) void #Foreign("clang_tokenize")
clang_annotateTokens(TU pointer #As("CXTranslationUnit"), Tokens *CXToken #As("CXToken *"), NumTokens uint, Cursors *CXCursor #As("CXCursor *")) void #Foreign("clang_annotateTokens")
clang_disposeTokens(TU pointer #As("CXTranslationUnit"), Tokens *CXToken #As("CXToken *"), NumTokens uint) void #Foreign("clang_disposeTokens")
clang_getCursorKindSpelling(Kind CXCursorKind #As("enum CXCursorKind")) CXString #As("CXString") #Foreign("clang_getCursorKindSpelling")
clang_getDefinitionSpellingAndExtent(p0 CXCursor #As("CXCursor"), startBuf **sbyte, endBuf **sbyte, startLine *uint, startColumn *uint, endLine *uint, endColumn *uint) void #Foreign("clang_getDefinitionSpellingAndExtent")
clang_enableStackTraces() void #Foreign("clang_enableStackTraces")
clang_executeOnThread(fn pointer #As("void (*)(void *)"), user_data pointer, stack_size uint) void #Foreign("clang_executeOnThread")
CXCompletionResult struct {
	CursorKind CXCursorKind
	CompletionString pointer
}
:CXCompletionChunk_Optional int = 0
:CXCompletionChunk_TypedText int = 1
:CXCompletionChunk_Text int = 2
:CXCompletionChunk_Placeholder int = 3
:CXCompletionChunk_Informative int = 4
:CXCompletionChunk_CurrentParameter int = 5
:CXCompletionChunk_LeftParen int = 6
:CXCompletionChunk_RightParen int = 7
:CXCompletionChunk_LeftBracket int = 8
:CXCompletionChunk_RightBracket int = 9
:CXCompletionChunk_LeftBrace int = 10
:CXCompletionChunk_RightBrace int = 11
:CXCompletionChunk_LeftAngle int = 12
:CXCompletionChunk_RightAngle int = 13
:CXCompletionChunk_Comma int = 14
:CXCompletionChunk_ResultType int = 15
:CXCompletionChunk_Colon int = 16
:CXCompletionChunk_SemiColon int = 17
:CXCompletionChunk_Equal int = 18
:CXCompletionChunk_HorizontalSpace int = 19
:CXCompletionChunk_VerticalSpace int = 20
CXCompletionChunkKind enum #Flags {
	CXCompletionChunk_Optional = 0_u
	CXCompletionChunk_TypedText = 1_u
	CXCompletionChunk_Text = 2_u
	CXCompletionChunk_Placeholder = 3_u
	CXCompletionChunk_Informative = 4_u
	CXCompletionChunk_CurrentParameter = 5_u
	CXCompletionChunk_LeftParen = 6_u
	CXCompletionChunk_RightParen = 7_u
	CXCompletionChunk_LeftBracket = 8_u
	CXCompletionChunk_RightBracket = 9_u
	CXCompletionChunk_LeftBrace = 10_u
	CXCompletionChunk_RightBrace = 11_u
	CXCompletionChunk_LeftAngle = 12_u
	CXCompletionChunk_RightAngle = 13_u
	CXCompletionChunk_Comma = 14_u
	CXCompletionChunk_ResultType = 15_u
	CXCompletionChunk_Colon = 16_u
	CXCompletionChunk_SemiColon = 17_u
	CXCompletionChunk_Equal = 18_u
	CXCompletionChunk_HorizontalSpace = 19_u
	CXCompletionChunk_VerticalSpace = 20_u
}
clang_getCompletionChunkKind(completion_string pointer, chunk_number uint) CXCompletionChunkKind #As("enum CXCompletionChunkKind") #Foreign("clang_getCompletionChunkKind")
clang_getCompletionChunkText(completion_string pointer, chunk_number uint) CXString #As("CXString") #Foreign("clang_getCompletionChunkText")
clang_getCompletionChunkCompletionString(completion_string pointer, chunk_number uint) pointer #Foreign("clang_getCompletionChunkCompletionString")
clang_getNumCompletionChunks(completion_string pointer) uint #Foreign("clang_getNumCompletionChunks")
clang_getCompletionPriority(completion_string pointer) uint #Foreign("clang_getCompletionPriority")
clang_getCompletionAvailability(completion_string pointer) CXAvailabilityKind #As("enum CXAvailabilityKind") #Foreign("clang_getCompletionAvailability")
clang_getCompletionNumAnnotations(completion_string pointer) uint #Foreign("clang_getCompletionNumAnnotations")
clang_getCompletionAnnotation(completion_string pointer, annotation_number uint) CXString #As("CXString") #Foreign("clang_getCompletionAnnotation")
clang_getCompletionParent(completion_string pointer, kind *CXCursorKind #As("enum CXCursorKind *")) CXString #As("CXString") #Foreign("clang_getCompletionParent")
clang_getCompletionBriefComment(completion_string pointer) CXString #As("CXString") #Foreign("clang_getCompletionBriefComment")
clang_getCursorCompletionString(cursor CXCursor #As("CXCursor")) pointer #Foreign("clang_getCursorCompletionString")
CXCodeCompleteResults struct {
	Results *CXCompletionResult
	NumResults uint
}
clang_getCompletionNumFixIts(results *CXCodeCompleteResults #As("CXCodeCompleteResults *"), completion_index uint) uint #Foreign("clang_getCompletionNumFixIts")
clang_getCompletionFixIt(results *CXCodeCompleteResults #As("CXCodeCompleteResults *"), completion_index uint, fixit_index uint, replacement_range *CXSourceRange #As("CXSourceRange *")) CXString #As("CXString") #Foreign("clang_getCompletionFixIt")
:CXCodeComplete_IncludeMacros int = 1
:CXCodeComplete_IncludeCodePatterns int = 2
:CXCodeComplete_IncludeBriefComments int = 4
:CXCodeComplete_SkipPreamble int = 8
:CXCodeComplete_IncludeCompletionsWithFixIts int = 16
CXCodeComplete_Flags enum #Flags {
	CXCodeComplete_IncludeMacros = 1_u
	CXCodeComplete_IncludeCodePatterns = 2_u
	CXCodeComplete_IncludeBriefComments = 4_u
	CXCodeComplete_SkipPreamble = 8_u
	CXCodeComplete_IncludeCompletionsWithFixIts = 16_u
}
:CXCompletionContext_Unexposed int = 0
:CXCompletionContext_AnyType int = 1
:CXCompletionContext_AnyValue int = 2
:CXCompletionContext_ObjCObjectValue int = 4
:CXCompletionContext_ObjCSelectorValue int = 8
:CXCompletionContext_CXXClassTypeValue int = 16
:CXCompletionContext_DotMemberAccess int = 32
:CXCompletionContext_ArrowMemberAccess int = 64
:CXCompletionContext_ObjCPropertyAccess int = 128
:CXCompletionContext_EnumTag int = 256
:CXCompletionContext_UnionTag int = 512
:CXCompletionContext_StructTag int = 1024
:CXCompletionContext_ClassTag int = 2048
:CXCompletionContext_Namespace int = 4096
:CXCompletionContext_NestedNameSpecifier int = 8192
:CXCompletionContext_ObjCInterface int = 16384
:CXCompletionContext_ObjCProtocol int = 32768
:CXCompletionContext_ObjCCategory int = 65536
:CXCompletionContext_ObjCInstanceMessage int = 131072
:CXCompletionContext_ObjCClassMessage int = 262144
:CXCompletionContext_ObjCSelectorName int = 524288
:CXCompletionContext_MacroName int = 1048576
:CXCompletionContext_NaturalLanguage int = 2097152
:CXCompletionContext_IncludedFile int = 4194304
:CXCompletionContext_Unknown int = 8388607
CXCompletionContext enum #Flags {
	CXCompletionContext_Unexposed = 0_u
	CXCompletionContext_AnyType = 1_u
	CXCompletionContext_AnyValue = 2_u
	CXCompletionContext_ObjCObjectValue = 4_u
	CXCompletionContext_ObjCSelectorValue = 8_u
	CXCompletionContext_CXXClassTypeValue = 16_u
	CXCompletionContext_DotMemberAccess = 32_u
	CXCompletionContext_ArrowMemberAccess = 64_u
	CXCompletionContext_ObjCPropertyAccess = 128_u
	CXCompletionContext_EnumTag = 256_u
	CXCompletionContext_UnionTag = 512_u
	CXCompletionContext_StructTag = 1024_u
	CXCompletionContext_ClassTag = 2048_u
	CXCompletionContext_Namespace = 4096_u
	CXCompletionContext_NestedNameSpecifier = 8192_u
	CXCompletionContext_ObjCInterface = 16384_u
	CXCompletionContext_ObjCProtocol = 32768_u
	CXCompletionContext_ObjCCategory = 65536_u
	CXCompletionContext_ObjCInstanceMessage = 131072_u
	CXCompletionContext_ObjCClassMessage = 262144_u
	CXCompletionContext_ObjCSelectorName = 524288_u
	CXCompletionContext_MacroName = 1048576_u
	CXCompletionContext_NaturalLanguage = 2097152_u
	CXCompletionContext_IncludedFile = 4194304_u
	CXCompletionContext_Unknown = 8388607_u
}
clang_defaultCodeCompleteOptions() uint #Foreign("clang_defaultCodeCompleteOptions")
clang_codeCompleteAt(TU pointer #As("CXTranslationUnit"), complete_filename *sbyte, complete_line uint, complete_column uint, unsaved_files *CXUnsavedFile #As("struct CXUnsavedFile *"), num_unsaved_files uint, options uint) *CXCodeCompleteResults #As("CXCodeCompleteResults *") #Foreign("clang_codeCompleteAt")
clang_sortCodeCompletionResults(Results *CXCompletionResult #As("CXCompletionResult *"), NumResults uint) void #Foreign("clang_sortCodeCompletionResults")
clang_disposeCodeCompleteResults(Results *CXCodeCompleteResults #As("CXCodeCompleteResults *")) void #Foreign("clang_disposeCodeCompleteResults")
clang_codeCompleteGetNumDiagnostics(Results *CXCodeCompleteResults #As("CXCodeCompleteResults *")) uint #Foreign("clang_codeCompleteGetNumDiagnostics")
clang_codeCompleteGetDiagnostic(Results *CXCodeCompleteResults #As("CXCodeCompleteResults *"), Index uint) pointer #Foreign("clang_codeCompleteGetDiagnostic")
clang_codeCompleteGetContexts(Results *CXCodeCompleteResults #As("CXCodeCompleteResults *")) ulong #Foreign("clang_codeCompleteGetContexts")
clang_codeCompleteGetContainerKind(Results *CXCodeCompleteResults #As("CXCodeCompleteResults *"), IsIncomplete *uint) CXCursorKind #As("enum CXCursorKind") #Foreign("clang_codeCompleteGetContainerKind")
clang_codeCompleteGetContainerUSR(Results *CXCodeCompleteResults #As("CXCodeCompleteResults *")) CXString #As("CXString") #Foreign("clang_codeCompleteGetContainerUSR")
clang_codeCompleteGetObjCSelector(Results *CXCodeCompleteResults #As("CXCodeCompleteResults *")) CXString #As("CXString") #Foreign("clang_codeCompleteGetObjCSelector")
clang_getClangVersion() CXString #As("CXString") #Foreign("clang_getClangVersion")
clang_toggleCrashRecovery(isEnabled uint) void #Foreign("clang_toggleCrashRecovery")
clang_getInclusions(tu pointer #As("CXTranslationUnit"), visitor pointer #As("CXInclusionVisitor"), client_data pointer) void #Foreign("clang_getInclusions")
:CXEval_Int int = 1
:CXEval_Float int = 2
:CXEval_ObjCStrLiteral int = 3
:CXEval_StrLiteral int = 4
:CXEval_CFStr int = 5
:CXEval_Other int = 6
:CXEval_UnExposed int = 0
CXEvalResultKind enum #Flags {
	CXEval_Int = 1_u
	CXEval_Float = 2_u
	CXEval_ObjCStrLiteral = 3_u
	CXEval_StrLiteral = 4_u
	CXEval_CFStr = 5_u
	CXEval_Other = 6_u
	CXEval_UnExposed = 0_u
}
clang_Cursor_Evaluate(C CXCursor #As("CXCursor")) pointer #Foreign("clang_Cursor_Evaluate")
clang_EvalResult_getKind(E pointer) CXEvalResultKind #As("CXEvalResultKind") #Foreign("clang_EvalResult_getKind")
clang_EvalResult_getAsInt(E pointer) int #Foreign("clang_EvalResult_getAsInt")
clang_EvalResult_getAsLongLong(E pointer) long #Foreign("clang_EvalResult_getAsLongLong")
clang_EvalResult_isUnsignedInt(E pointer) uint #Foreign("clang_EvalResult_isUnsignedInt")
clang_EvalResult_getAsUnsigned(E pointer) ulong #Foreign("clang_EvalResult_getAsUnsigned")
clang_EvalResult_getAsDouble(E pointer) double #Foreign("clang_EvalResult_getAsDouble")
clang_EvalResult_getAsStr(E pointer) cstring #Foreign("clang_EvalResult_getAsStr")
clang_EvalResult_dispose(E pointer) void #Foreign("clang_EvalResult_dispose")
clang_getRemappings(path *sbyte) pointer #Foreign("clang_getRemappings")
clang_getRemappingsFromFileList(filePaths **sbyte, numFiles uint) pointer #Foreign("clang_getRemappingsFromFileList")
clang_remap_getNumFiles(p0 pointer) uint #Foreign("clang_remap_getNumFiles")
clang_remap_getFilenames(p0 pointer, index uint, original *CXString #As("CXString *"), transformed *CXString #As("CXString *")) void #Foreign("clang_remap_getFilenames")
clang_remap_dispose(p0 pointer) void #Foreign("clang_remap_dispose")
:CXVisit_Break int = 0
:CXVisit_Continue int = 1
CXVisitorResult enum #Flags {
	CXVisit_Break = 0_u
	CXVisit_Continue = 1_u
}
CXCursorAndRangeVisitor struct {
	context pointer
	visit pointer
}
:CXResult_Success int = 0
:CXResult_Invalid int = 1
:CXResult_VisitBreak int = 2
CXResult enum #Flags {
	CXResult_Success = 0_u
	CXResult_Invalid = 1_u
	CXResult_VisitBreak = 2_u
}
clang_findReferencesInFile(cursor CXCursor #As("CXCursor"), file pointer, visitor CXCursorAndRangeVisitor #As("CXCursorAndRangeVisitor")) CXResult #As("CXResult") #Foreign("clang_findReferencesInFile")
clang_findIncludesInFile(TU pointer #As("CXTranslationUnit"), file pointer, visitor CXCursorAndRangeVisitor #As("CXCursorAndRangeVisitor")) CXResult #As("CXResult") #Foreign("clang_findIncludesInFile")
CXIdxLoc struct {
	ptr_data_0 pointer
	ptr_data_1 pointer
	int_data uint
}
CXIdxIncludedFileInfo struct {
	hashLoc CXIdxLoc
	filename *sbyte
	file pointer
	isImport int
	isAngled int
	isModuleImport int
}
CXIdxImportedASTFileInfo struct {
	file pointer
	module pointer
	loc CXIdxLoc
	isImplicit int
}
:CXIdxEntity_Unexposed int = 0
:CXIdxEntity_Typedef int = 1
:CXIdxEntity_Function int = 2
:CXIdxEntity_Variable int = 3
:CXIdxEntity_Field int = 4
:CXIdxEntity_EnumConstant int = 5
:CXIdxEntity_ObjCClass int = 6
:CXIdxEntity_ObjCProtocol int = 7
:CXIdxEntity_ObjCCategory int = 8
:CXIdxEntity_ObjCInstanceMethod int = 9
:CXIdxEntity_ObjCClassMethod int = 10
:CXIdxEntity_ObjCProperty int = 11
:CXIdxEntity_ObjCIvar int = 12
:CXIdxEntity_Enum int = 13
:CXIdxEntity_Struct int = 14
:CXIdxEntity_Union int = 15
:CXIdxEntity_CXXClass int = 16
:CXIdxEntity_CXXNamespace int = 17
:CXIdxEntity_CXXNamespaceAlias int = 18
:CXIdxEntity_CXXStaticVariable int = 19
:CXIdxEntity_CXXStaticMethod int = 20
:CXIdxEntity_CXXInstanceMethod int = 21
:CXIdxEntity_CXXConstructor int = 22
:CXIdxEntity_CXXDestructor int = 23
:CXIdxEntity_CXXConversionFunction int = 24
:CXIdxEntity_CXXTypeAlias int = 25
:CXIdxEntity_CXXInterface int = 26
CXIdxEntityKind enum #Flags {
	CXIdxEntity_Unexposed = 0_u
	CXIdxEntity_Typedef = 1_u
	CXIdxEntity_Function = 2_u
	CXIdxEntity_Variable = 3_u
	CXIdxEntity_Field = 4_u
	CXIdxEntity_EnumConstant = 5_u
	CXIdxEntity_ObjCClass = 6_u
	CXIdxEntity_ObjCProtocol = 7_u
	CXIdxEntity_ObjCCategory = 8_u
	CXIdxEntity_ObjCInstanceMethod = 9_u
	CXIdxEntity_ObjCClassMethod = 10_u
	CXIdxEntity_ObjCProperty = 11_u
	CXIdxEntity_ObjCIvar = 12_u
	CXIdxEntity_Enum = 13_u
	CXIdxEntity_Struct = 14_u
	CXIdxEntity_Union = 15_u
	CXIdxEntity_CXXClass = 16_u
	CXIdxEntity_CXXNamespace = 17_u
	CXIdxEntity_CXXNamespaceAlias = 18_u
	CXIdxEntity_CXXStaticVariable = 19_u
	CXIdxEntity_CXXStaticMethod = 20_u
	CXIdxEntity_CXXInstanceMethod = 21_u
	CXIdxEntity_CXXConstructor = 22_u
	CXIdxEntity_CXXDestructor = 23_u
	CXIdxEntity_CXXConversionFunction = 24_u
	CXIdxEntity_CXXTypeAlias = 25_u
	CXIdxEntity_CXXInterface = 26_u
}
:CXIdxEntityLang_None int = 0
:CXIdxEntityLang_C int = 1
:CXIdxEntityLang_ObjC int = 2
:CXIdxEntityLang_CXX int = 3
:CXIdxEntityLang_Swift int = 4
CXIdxEntityLanguage enum #Flags {
	CXIdxEntityLang_None = 0_u
	CXIdxEntityLang_C = 1_u
	CXIdxEntityLang_ObjC = 2_u
	CXIdxEntityLang_CXX = 3_u
	CXIdxEntityLang_Swift = 4_u
}
:CXIdxEntity_NonTemplate int = 0
:CXIdxEntity_Template int = 1
:CXIdxEntity_TemplatePartialSpecialization int = 2
:CXIdxEntity_TemplateSpecialization int = 3
CXIdxEntityCXXTemplateKind enum #Flags {
	CXIdxEntity_NonTemplate = 0_u
	CXIdxEntity_Template = 1_u
	CXIdxEntity_TemplatePartialSpecialization = 2_u
	CXIdxEntity_TemplateSpecialization = 3_u
}
:CXIdxAttr_Unexposed int = 0
:CXIdxAttr_IBAction int = 1
:CXIdxAttr_IBOutlet int = 2
:CXIdxAttr_IBOutletCollection int = 3
CXIdxAttrKind enum #Flags {
	CXIdxAttr_Unexposed = 0_u
	CXIdxAttr_IBAction = 1_u
	CXIdxAttr_IBOutlet = 2_u
	CXIdxAttr_IBOutletCollection = 3_u
}
CXIdxAttrInfo struct {
	kind CXIdxAttrKind
	cursor CXCursor
	loc CXIdxLoc
}
CXIdxEntityInfo struct {
	kind CXIdxEntityKind
	templateKind CXIdxEntityCXXTemplateKind
	lang CXIdxEntityLanguage
	name *sbyte
	USR *sbyte
	cursor CXCursor
	attributes **CXIdxAttrInfo
	numAttributes uint
}
CXIdxContainerInfo struct {
	cursor CXCursor
}
CXIdxIBOutletCollectionAttrInfo struct {
	attrInfo *CXIdxAttrInfo
	objcClass *CXIdxEntityInfo
	classCursor CXCursor
	classLoc CXIdxLoc
}
:CXIdxDeclFlag_Skipped int = 1
CXIdxDeclInfoFlags enum #Flags {
	CXIdxDeclFlag_Skipped = 1_u
}
CXIdxDeclInfo struct {
	entityInfo *CXIdxEntityInfo
	cursor CXCursor
	loc CXIdxLoc
	semanticContainer *CXIdxContainerInfo
	lexicalContainer *CXIdxContainerInfo
	isRedeclaration int
	isDefinition int
	isContainer int
	declAsContainer *CXIdxContainerInfo
	isImplicit int
	attributes **CXIdxAttrInfo
	numAttributes uint
	flags uint
}
:CXIdxObjCContainer_ForwardRef int = 0
:CXIdxObjCContainer_Interface int = 1
:CXIdxObjCContainer_Implementation int = 2
CXIdxObjCContainerKind enum #Flags {
	CXIdxObjCContainer_ForwardRef = 0_u
	CXIdxObjCContainer_Interface = 1_u
	CXIdxObjCContainer_Implementation = 2_u
}
CXIdxObjCContainerDeclInfo struct {
	declInfo *CXIdxDeclInfo
	kind CXIdxObjCContainerKind
}
CXIdxBaseClassInfo struct {
	base *CXIdxEntityInfo
	cursor CXCursor
	loc CXIdxLoc
}
CXIdxObjCProtocolRefInfo struct {
	protocol *CXIdxEntityInfo
	cursor CXCursor
	loc CXIdxLoc
}
CXIdxObjCProtocolRefListInfo struct {
	protocols **CXIdxObjCProtocolRefInfo
	numProtocols uint
}
CXIdxObjCInterfaceDeclInfo struct {
	containerInfo *CXIdxObjCContainerDeclInfo
	superInfo *CXIdxBaseClassInfo
	protocols *CXIdxObjCProtocolRefListInfo
}
CXIdxObjCCategoryDeclInfo struct {
	containerInfo *CXIdxObjCContainerDeclInfo
	objcClass *CXIdxEntityInfo
	classCursor CXCursor
	classLoc CXIdxLoc
	protocols *CXIdxObjCProtocolRefListInfo
}
CXIdxObjCPropertyDeclInfo struct {
	declInfo *CXIdxDeclInfo
	getter *CXIdxEntityInfo
	setter *CXIdxEntityInfo
}
CXIdxCXXClassDeclInfo struct {
	declInfo *CXIdxDeclInfo
	bases **CXIdxBaseClassInfo
	numBases uint
}
:CXIdxEntityRef_Direct int = 1
:CXIdxEntityRef_Implicit int = 2
CXIdxEntityRefKind enum #Flags {
	CXIdxEntityRef_Direct = 1_u
	CXIdxEntityRef_Implicit = 2_u
}
:CXSymbolRole_None int = 0
:CXSymbolRole_Declaration int = 1
:CXSymbolRole_Definition int = 2
:CXSymbolRole_Reference int = 4
:CXSymbolRole_Read int = 8
:CXSymbolRole_Write int = 16
:CXSymbolRole_Call int = 32
:CXSymbolRole_Dynamic int = 64
:CXSymbolRole_AddressOf int = 128
:CXSymbolRole_Implicit int = 256
CXSymbolRole enum #Flags {
	CXSymbolRole_None = 0_u
	CXSymbolRole_Declaration = 1_u
	CXSymbolRole_Definition = 2_u
	CXSymbolRole_Reference = 4_u
	CXSymbolRole_Read = 8_u
	CXSymbolRole_Write = 16_u
	CXSymbolRole_Call = 32_u
	CXSymbolRole_Dynamic = 64_u
	CXSymbolRole_AddressOf = 128_u
	CXSymbolRole_Implicit = 256_u
}
CXIdxEntityRefInfo struct {
	kind CXIdxEntityRefKind
	cursor CXCursor
	loc CXIdxLoc
	referencedEntity *CXIdxEntityInfo
	parentEntity *CXIdxEntityInfo
	container *CXIdxContainerInfo
	role CXSymbolRole
}
clang_index_isEntityObjCContainerKind(p0 CXIdxEntityKind #As("CXIdxEntityKind")) int #Foreign("clang_index_isEntityObjCContainerKind")
clang_index_getObjCContainerDeclInfo(p0 *CXIdxDeclInfo #As("const CXIdxDeclInfo *")) *CXIdxObjCContainerDeclInfo #As("const CXIdxObjCContainerDeclInfo *") #Foreign("clang_index_getObjCContainerDeclInfo")
clang_index_getObjCInterfaceDeclInfo(p0 *CXIdxDeclInfo #As("const CXIdxDeclInfo *")) *CXIdxObjCInterfaceDeclInfo #As("const CXIdxObjCInterfaceDeclInfo *") #Foreign("clang_index_getObjCInterfaceDeclInfo")
clang_index_getObjCCategoryDeclInfo(p0 *CXIdxDeclInfo #As("const CXIdxDeclInfo *")) *CXIdxObjCCategoryDeclInfo #As("const CXIdxObjCCategoryDeclInfo *") #Foreign("clang_index_getObjCCategoryDeclInfo")
clang_index_getObjCProtocolRefListInfo(p0 *CXIdxDeclInfo #As("const CXIdxDeclInfo *")) *CXIdxObjCProtocolRefListInfo #As("const CXIdxObjCProtocolRefListInfo *") #Foreign("clang_index_getObjCProtocolRefListInfo")
clang_index_getObjCPropertyDeclInfo(p0 *CXIdxDeclInfo #As("const CXIdxDeclInfo *")) *CXIdxObjCPropertyDeclInfo #As("const CXIdxObjCPropertyDeclInfo *") #Foreign("clang_index_getObjCPropertyDeclInfo")
clang_index_getIBOutletCollectionAttrInfo(p0 *CXIdxAttrInfo #As("const CXIdxAttrInfo *")) *CXIdxIBOutletCollectionAttrInfo #As("const CXIdxIBOutletCollectionAttrInfo *") #Foreign("clang_index_getIBOutletCollectionAttrInfo")
clang_index_getCXXClassDeclInfo(p0 *CXIdxDeclInfo #As("const CXIdxDeclInfo *")) *CXIdxCXXClassDeclInfo #As("const CXIdxCXXClassDeclInfo *") #Foreign("clang_index_getCXXClassDeclInfo")
clang_index_getClientContainer(p0 *CXIdxContainerInfo #As("const CXIdxContainerInfo *")) pointer #Foreign("clang_index_getClientContainer")
clang_index_setClientContainer(p0 *CXIdxContainerInfo #As("const CXIdxContainerInfo *"), p1 pointer) void #Foreign("clang_index_setClientContainer")
clang_index_getClientEntity(p0 *CXIdxEntityInfo #As("const CXIdxEntityInfo *")) pointer #Foreign("clang_index_getClientEntity")
clang_index_setClientEntity(p0 *CXIdxEntityInfo #As("const CXIdxEntityInfo *"), p1 pointer) void #Foreign("clang_index_setClientEntity")
clang_IndexAction_create(CIdx pointer) pointer #Foreign("clang_IndexAction_create")
clang_IndexAction_dispose(p0 pointer) void #Foreign("clang_IndexAction_dispose")
:CXIndexOpt_None int = 0
:CXIndexOpt_SuppressRedundantRefs int = 1
:CXIndexOpt_IndexFunctionLocalSymbols int = 2
:CXIndexOpt_IndexImplicitTemplateInstantiations int = 4
:CXIndexOpt_SuppressWarnings int = 8
:CXIndexOpt_SkipParsedBodiesInSession int = 16
CXIndexOptFlags enum #Flags {
	CXIndexOpt_None = 0_u
	CXIndexOpt_SuppressRedundantRefs = 1_u
	CXIndexOpt_IndexFunctionLocalSymbols = 2_u
	CXIndexOpt_IndexImplicitTemplateInstantiations = 4_u
	CXIndexOpt_SuppressWarnings = 8_u
	CXIndexOpt_SkipParsedBodiesInSession = 16_u
}
IndexerCallbacks struct {
	abortQuery pointer
	diagnostic pointer
	enteredMainFile pointer
	ppIncludedFile pointer
	importedASTFile pointer
	startedTranslationUnit pointer
	indexDeclaration pointer
	indexEntityReference pointer
}
clang_indexSourceFile(p0 pointer, client_data pointer, index_callbacks *IndexerCallbacks #As("IndexerCallbacks *"), index_callbacks_size uint, index_options uint, source_filename *sbyte, command_line_args **sbyte, num_command_line_args int, unsaved_files *CXUnsavedFile #As("struct CXUnsavedFile *"), num_unsaved_files uint, out_TU *pointer #As("CXTranslationUnit *"), TU_options uint) int #Foreign("clang_indexSourceFile")
clang_indexSourceFileFullArgv(p0 pointer, client_data pointer, index_callbacks *IndexerCallbacks #As("IndexerCallbacks *"), index_callbacks_size uint, index_options uint, source_filename *sbyte, command_line_args **sbyte, num_command_line_args int, unsaved_files *CXUnsavedFile #As("struct CXUnsavedFile *"), num_unsaved_files uint, out_TU *pointer #As("CXTranslationUnit *"), TU_options uint) int #Foreign("clang_indexSourceFileFullArgv")
clang_indexTranslationUnit(p0 pointer, client_data pointer, index_callbacks *IndexerCallbacks #As("IndexerCallbacks *"), index_callbacks_size uint, index_options uint, p5 pointer #As("CXTranslationUnit")) int #Foreign("clang_indexTranslationUnit")
clang_indexLoc_getFileLocation(loc CXIdxLoc #As("CXIdxLoc"), indexFile *pointer, file *pointer, line *uint, column *uint, offset *uint) void #Foreign("clang_indexLoc_getFileLocation")
clang_indexLoc_getCXSourceLocation(loc CXIdxLoc #As("CXIdxLoc")) CXSourceLocation #As("CXSourceLocation") #Foreign("clang_indexLoc_getCXSourceLocation")
clang_Type_visitFields(T CXType #As("CXType"), visitor pointer #As("CXFieldVisitor"), client_data pointer) uint #Foreign("clang_Type_visitFields")
